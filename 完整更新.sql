/*
SQLyog Ultimate v13.1.1 (64 bit)
MySQL - 8.0.13 
*********************************************************************
*/
/*!40101 SET NAMES utf8 */;

create table `jh` (
	`timu` text ,
	`ans` text 
); 
insert into `jh` (`timu`, `ans`) values('事务隔离级别是谁实现的？（）\nA、Java应用程序\nB、Hibernate\nC、数据库系统\nD、JDBC驱动程序\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列关于默认拦截器的描述，错误的是（   ）\nA、拦截器栈不能作为默认拦截器\nB、默认拦截器需要使用<default-interceptor-ref>元素\nC、默认拦截器可以对其指定的包中，所有的Action都能起到拦截的作用\nD、每一个包下只能定义一个默认拦截器\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列操作对一级缓存的影响描述错误的是（）\nA、执行delete操作时，如果对象不具有OID，将抛出异常\nB、执行update操作时，如果对象不具有OID，将抛出异常\nC、执行update操作时，如果一级缓存中已经存在有相同OID数据，将抛出异常\nD、执行merge操作时，如果一级缓存中已经存在有相同OID数据，将抛出异常\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列表单标签中，可以包含其他标签的是（   ）\nA、<s:submit>\nB、<s:form>\nC、<s:password>\nD、<s:reset>\n','B\n');
insert into `jh` (`timu`, `ans`) values('在hibernate中，要想在删除某个客户数据的同时删除该客户对应得所有订单数据，下列方法可行的有（）\nA、配置客户和订单关联的cascade属性为save-update\nB、配置客户和订单关联的cascade属性为all\nC、设置多对一关联的inverse属性为true\nD、设置多对一关联的inverse属性为false\n','B\n');
insert into `jh` (`timu`, `ans`) values('于Struts2的以下配置内容应该在哪个配置文件中编写（）\n<filter>\n<filter-name>struts2</filter-name>\n<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAdnExecuteFilter </filter-class> </filter>\n<filter-mapping>\n<filter-name>struts2</filter-name>\n<url-pattern>/*</utl-pattern>\n</filter-mapping>\nA、struts-default.xml\nB、struts.xml\nC、web.xml\nD、ter.xml\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列标签中，用于输出指定的值的是（   ）\nA、<s:property>\nB、<s:include>\nC、<s:param>\nD、<s:form>\n','A\n');
insert into `jh` (`timu`, `ans`) values('在三层结构中，数据访问层承担的责任是\nA、定义实体类\nB、数据的增删改查操作\nC、业务逻辑的描述\nD、页面展示和控制转发\n','B\n');
insert into `jh` (`timu`, `ans`) values('在<action>元素中,哪个属性可以指定Action中要执行的方法的名称？（）\nA、method\nB、name\nC、class\nD、methodName\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列关于Struts2标签库的描述，错误的是（   ）\nA、使用标签库中的标签有利于代码的可维护性和可读性\nB、UI标签是以丰富而可复用的HTML文件来显示数据\nC、普通标签又分为表单标签和数据标签\nD、Struts2标签库主要分为普通标签和UI标签\n','C\n');
insert into `jh` (`timu`, `ans`) values('在以下这段配置中\n<package name=\"demo4\" extends=\"struts-default\" namespace=\"/\">\n<action name=\"user_*\" class=\"cn.itcast.struts2.demo4.UserAction\" method=\"{1}\"></action>\n</package>\n想要执行UserAction中的add方法,在页面中的访问路径应该是（）\nA、/user_add.action\nB、/demo4/user_add.action\nC、/demo4/user.action?method=add\nD、/user.action?method=add\n','A\n');
insert into `jh` (`timu`, `ans`) values('ORM是（）\nA、对象关系映射\nB、对象实体映射\nC、数据传输对象\nD、数据访问对象\n','A\n');
insert into `jh` (`timu`, `ans`) values('不属于struts2表单标签库的是（）\nA、<s:textfield>\nB、<s:textare>\nC、<s:submit>\nD、<select>\n','D\n');
insert into `jh` (`timu`, `ans`) values('下列事务特性中，表示将事务中所做的操作捆绑成一个不可分割的单元的是（   ）\nA、隔离性\nB、持久性\nC、一致性\nD、原子性\n','D\n');
insert into `jh` (`timu`, `ans`) values('下列有关<s:iterator>标签属性的描述，错误的是（   ）\nA、step属性的默认值为0\nB、step属性指定了每一次迭代后索引增加的值\nC、begin属性指定了迭代数组或集合的起始位置\nD、begin属性的默认值为0\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列哪个不是struts-2.3.24版本导入相关的JAR包？（）\nA、struts2-core-2.3.24.jar\nB、xwork-core-2.3.24.jar\nC、commons-logging-1.2.jar\nD、log4j-core-2.2.jar\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，只用于在目标方法执行前实施增强的是（   ）\nA、前置通知\nB、后置通知\nC、异常抛出通知\nD、环绕通知\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列哪个常量用来配置Action的扩展名？（）\nA、struts.i18n.encoding\nB、struts.action.extension\nC、struts.serve.static.browserCache\nD、struts.devMode\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列有关<s:select>标签属性的描述中，错误的是（   ）\nA、multiple属性值默认为false\nB、size属性可以让下拉框同时显示多个值\nC、headerKey和headerValue属性能用于在所有的真实选项之前加一项作为标题项\nD、headerKey和headerValue属性需要同时使用\n','A\n');
insert into `jh` (`timu`, `ans`) values('struts2中使用动态方法访问,需要打开哪个常量？（）\nA、<constantname=\"struts.action.extension\"value=\"action\"/>\nB、<constantname=\"struts.devMode\"value=\"true\"/>\nC、<constantname=\"struts.enable.DynamicMethodInvocation\"value=\"true\"/>\nD、<constantname=\"struts.custom.i18n.resources\"value=\"msg\"/>\n','C\n');
insert into `jh` (`timu`, `ans`) values('对于HQL中的as关键字，下列说法正确的是（）\nA、必须要有\nB、必须没有\nC、可以有，也可以没有\nD、以上说法均不正确\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列有关拦截器的描述，错误的是（   ）\nA、拦截器可以动态拦截Action调用的对象\nB、对应各个功能的拦截器按照一定的顺序排列在一起形成拦截器链\nC、拦截器只能在一个Action执行前进行拦截\nD、拦截器链组成的集合是拦截器栈\n','C\n');
insert into `jh` (`timu`, `ans`) values('在JSP页面中可以通过struts2提供的（）标签来输出信息。\nA、<s:input>\nB、<s:texts>\nC、<s:submit>\nD、<s:text>\n','D\n');
insert into `jh` (`timu`, `ans`) values('下列有关<s:reset>标签的描述，错误的是（   ）\nA、<s:reset>标签用来创建一个重置按钮\nB、<s:reset>标签会生成HTML中的<inputtype=\"reset\"/>标签\nC、<s:reset>标签的value属性用于显示按钮的值\nD、<s:reset>标签的常用属性为id和value\n','D\n');
insert into `jh` (`timu`, `ans`) values('在解压后的Struts2.3.24的安装目录结构中，用于存放源代码的文件夹是（   ）\nA、apps\nB、docs\nC、src\nD、lib\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，不输于OGNL结构3要素的是（   ）\nA、表达式\nB、上下文环境\nC、集合对象\nD、根对象\n','C\n');
insert into `jh` (`timu`, `ans`) values('Hibernate中实体类对象的状态不包括（）\nA、瞬时状态\nB、持久状态\nC、查询状态\nD、游离状态\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列有关文件上传的描述，错误的是（   ）\nA、文件上传需要用到<s:file>标签\nB、文件上传时表单的method属性必须设置成get提交方式\nC、文件上传需将form表单的enctype属性值设置为multipart/form-data\nD、文件上传是指将本地文件上传到服务器的指定目录下\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，不属于<action>元素属性的是（   ）\nA、class\nB、method\nC、namespace\nD、converter\n','C\n');
insert into `jh` (`timu`, `ans`) values('OID生成策略不包含下列哪种？（）\nA、assigned\nB、auto\nC、native\nD、identity\n','B\n');
insert into `jh` (`timu`, `ans`) values('在<action>中没有配置method的属性,那么会默认执行Action中的哪个方法？（）\nA、execute()\nB、exec()\nC、doGet()\nD、service()\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列有关自定义拦截器的描述，错误的是（   ）\nA、如果需要开发自己的拦截器类，就需要直接或间接的实现Interceptor接口\nB、继承抽象拦截器类AbstractIntercepter也可以自定义拦截器\nC、Struts2的内置拦截器可以完成大部分的拦截任务，因此不推荐自定义拦截器\nD、与实现Interceptor接口相比，继承AbstractInterceptor类进行自定义拦截器的方法更为简单\n','C\n');
insert into `jh` (`timu`, `ans`) values('执行以下HQL语句，执行查询后查询结果的返回值说法正确的是（）\nSELECT username,userid from User\nA、语法错误，不能执行\nB、返回一个List的实例，List中存放Object对象\nC、返回一个List的实例，List中存放Object数组对象\nD、当返回结果只有一条时，返回一个数组\n','C\n');
insert into `jh` (`timu`, `ans`) values('当类型转换失败时，Struts2会自动跳转到（）结果。\nA、error\nB、success\nC、login\nD、input\n','D\n');
insert into `jh` (`timu`, `ans`) values('下列关于<include>元素的描述中，错误的是（   ）\nA、每一个被包含的配置文件都是标准的Struts2配置文件\nB、配置<include>元素时，需指定一个必选的file属性\nC、每一个被包含的配置文件不需再包含DTD信息、Struts2配置文件的根元素等信息\nD、<include>元素进行包含配置体现的是软件工程中的\"分而治之\"原则\n','C\n');
insert into `jh` (`timu`, `ans`) values('在应用myapp下,有如下一段配置\n<package name=”demo1” extends=”struts-default” namespace=”/user”>\n<action name=”hello” class=”cn.itcast.action.HelloAction”>\n...\n</action>\n</package>\n那么访问这个Action的正确的路径是（）\nA、/myapp/demo1/user/hello.action\nB、/myapp/demo1/user.action\nC、/myapp/user/hello.action\nD、/myapp/hello.action\n','C\n');
insert into `jh` (`timu`, `ans`) values('请看代码\nform.jsp\n<s:form action=”myAction” namespace=”/” theme=”simple”>\n用户名：<s:textfield name=”user.username” /><br/>\n密码：<s:password name=”user.password” /><br/>\n<s:submit value=”提交”/>\n</s:form>\nstruts.xml\n<package name=”xxx” namespace=”/” extends=”struts-default”>\n<action name=”myAction” class=”cn.itcast.web.action.MyAction”/>\n</package>\nUser.java\npublic class User {\nprivate String username;\nprivate String password;\npublic void setUsername(String username) {\nthis. username = username;\n}\npublic void setPassword(String password) {\nthis. password = password;\n}\n}\nMyAction.java\npackage cn.itcast.web.action;\npublic class MyAction extends ActionSupport {\nprivate User user = new User();\npublic void setUser(User user) {\nthis.user = user;\n}\npublic User getUser() {\nreturn user;\n}\npublic String execute() {\nSystem.out.println(user.getUsername() + “, “ + user.getPassword());\nreturn null;\n}\n}\n当在form.jsp表单中，向用户名中输入zhangSan，向密码中输入123后提交，控制台会有什么样的输出结果？（）\nA、null,null\nB、zhangSan,123\nC、zhangSan,null\nD、null,zhangSan\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，不属于<s:form>标签属性的是（   ）\nA、action\nB、namespace\nC、class\nD、enctype\n','C\n');
insert into `jh` (`timu`, `ans`) values('Struts2框架的核心是（）\nA、xwork\nB、Struts1\nC、Servlet\nD、JSP\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列有关Spring框架的描述，错误的是（   ）\nA、Spring是JavaWeb开发框架\nB、Spring是轻量级框架\nC、Spring是开源框架\nD、Spring是持久层框架\n','D\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，不属于Spring框架优点的是（   ）\nA、提供强大的、可以有效减少页面代码的标签\nB、声明式事务的支持\nC、方便解耦、简化开发\nD、方便集成各种优秀框架\n','A\n');
insert into `jh` (`timu`, `ans`) values('在HQL语句的参数查询中，执行以下代码，下列选项能够为参数正确赋值的操作是（）\nQuery query = s.createQuery(\"from Customer o where o.name=?\");\nA、query.setParameter(1, \"Tom\");\nB、query.setParameter(0, \"Tom\");\nC、query.setString(0,Tom);\nD、query.setInteger (0,Tom);\n','B\n');
insert into `jh` (`timu`, `ans`) values('以下方法不是Session接口用于进行增删改操作的是（）\nA、save(Objectobj)\nB、update(Objectobj)\nC、delete(Objectobj)\nD、load(Classclazz,Serializableuuid)\n','D\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate的ORM映射文件中包含：<class name=”cn.User” table=”user”>,这一句中table属性的作用是（）\nA、指定表名\nB、指定类名\nC、指定数据库名\nD、指定ORM映射文件名\n','A\n');
insert into `jh` (`timu`, `ans`) values('在Action接口中提供的5个逻辑视图代表表单输入错误会跳转的视图名称是（）\nA、SUCCESS\nB、ERROR\nC、INPUT\nD、LOGIN\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列关于package元素常用属性的描述，错误的是（   ）\nA、name用于指定该包的名字\nB、namespace属性定义该包的命名空间\nC、extends属性指定该包继承自其他包\nD、abstract属性的值为false时，说明该包中不能包含Action定义\n','D\n');
insert into `jh` (`timu`, `ans`) values('下列有关Struts2 内置主题的描述，错误的是（   ）\nA、xhtml为默认主题\nB、Struts默认主题是由Struts框架固定的，不可进行修改\nC、xhtml主题有一定的局限性，难以胜任复杂的页面布局\nD、css_xhtml主题是对xhtml的扩展，在xhtml的基础之上添加对CSS的支持和控制\n','B\n');
insert into `jh` (`timu`, `ans`) values('在cn.itcast.action.demo1包下有一个配置文件struts_demo1.xml.以下哪种方式可以引入该配置文件到struts.xml中？（）\nA、<include file=\"cn/itcast/action/demo1/struts_demo1.xml\"/>\nB、<include file=\"cn.itcast.action.demo1.struts_demo1.xml\"/>\nC、<include file=\"struts_demo1.xml\"/>\nD、无法引入\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列有关Hibernate中核心接口Session的描述，错误的是（   ）\nA、Session是线程安全的\nB、多个并发线程同时操作一个Session实例时，可能导致Session数据存取的混乱\nC、通过SessionFactory实例的openSession()方法可以获取Session实例\nD、通过SessionFactory实例的getCurrentSession()方法可以获取Session实例\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列哪个接口用于执行原生SQL？（）\nA、SQLQuery\nB、Session\nC、List\nD、Query\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列有关<s:checkboxlist>标签的描述，错误的是（   ）\nA、<s:checkboxlist>标签用于一次性创建多个复选框\nB、一个JSP文件中，用户只能创建一个<s:checkboxlist>标签\nC、<s:checkboxlist>标签用来产生一组<inputtype=\"checkbox\"/>标签\nD、listValue属性用于生成checkbox后面显示的文字\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列有关事务隔离级别的描述，错误的是（   ）\nA、事务的隔离级别越高，越能保证数据库的完整性和一致性\nB、事务的隔离级别越高，并发时对性能的影响也越大\nC、事务的隔离级别越高越好\nD、序列化是事务隔离级别中最高的\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列关于拦截器的配置的描述，错误的是（   ）\nA、在定义拦截器时不可以传入参数\nB、拦截器的配置是在struts.xml文件中完成的\nC、要想让拦截器起作用，需先对它进行配置\nD、拦截器的配置是通过<interceptor>标签进行的\n','A\n');
insert into `jh` (`timu`, `ans`) values('在struts2配置中用（）元素配置常量。\nA、<action>\nB、<package>\nC、<constant>\nD、<include>\n','C\n');
insert into `jh` (`timu`, `ans`) values('Hibernate级联保存集合中的对象，casecade属性应该取什么值（）\nA、none\nB、save\nC、delete\nD、save-update\n','D\n');
insert into `jh` (`timu`, `ans`) values('以下哪个标签是struts2中用于循环迭代的 。（）\nA、<s:property>\nB、<s:iterator>\nC、<s:logic>\nD、<s:foreach>\n','B\n');
insert into `jh` (`timu`, `ans`) values('在hibernate中，当cascade属性值为（）时，标识不进行级联操作。\nA、all\nB、no\nC、none\nD、delete\n','C\n');
insert into `jh` (`timu`, `ans`) values('以下HQL语句书写语法格式错误的是（）\nA、select um.userName from UserModel\nB、select userName from UserModel um\nC、select userName from UserModel as um\nD、from UserModel um\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列有关Hibernate框架的描述，错误的是（   ）\nA、Hibernate对JDBC进行了轻量级的对象封装\nB、Hibernate是一个付费才可以使用的框架\nC、Hibernate是一个持久化框架\nD、Hibernate使得Java开发人员可以使用面向对象的编程思想来操作数据库\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列获取ApplicationContext对象正确的是（）\nA、ApplicationContext ctx = new ClassPathXmlApplicationContext();\nB、ApplicationContext ctx = new ApplicationContext(\"配置文件名\");\nC、ApplicationContext ctx = new ClassPathXmlApplicationContext(\"配置文件名\");\nD、ApplicationContext ctx = new FileSystemXmlApplicationContext();\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列有关package元素中的extends属性的描述，错误的是（   ）\nA、extends属性是可选属性\nB、一个package元素中的extends属性可以出现多次\nC、extends属性一次可以继承多个包，中间用逗号隔开\nD、extends属性指定该包继承自其他包\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列哪项不是用于配置数据库连接的配置？（）\nA、hibernate.connection.url\nB、hibernate.connection.username\nC、hibernate.show_sql\nD、hibernate.connection.password\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列有关<result>元素属性的描述，错误的是（   ）\nA、<result>元素可以有name和type属性\nB、<result>元素中的name属性是必选属性\nC、type属性用于指定返回的视图资源的类型\nD、type属性的默认值是dispatcher\n','B\n');
insert into `jh` (`timu`, `ans`) values('在hibernate的HQL查询中，下列说法不正确的是（）\nA、HQL子句本身的大小写没有差别，但类名和属性名必须区分大小写。\nB、HQL支持where子句。\nC、HQL支持as子句。\nD、where、as关键字区分大小写。\n','D\n');
insert into `jh` (`timu`, `ans`) values('下列常量中，用于在execute()方法中返回，表示执行成功并返回结果页面的是（   ）。\nA、INPUT\nB、LOGIN\nC、NONE\nD、SUCCESS\n','D\n');
insert into `jh` (`timu`, `ans`) values('使用Struts2.3.24版本的项目所依赖的基础JAR包的个数是（   ）\nA、11\nB、12\nC、13\nD、14\n','C\n');
insert into `jh` (`timu`, `ans`) values('Struts2中默认的配置文件名称是（）\nA、struts.xml\nB、struts2.xml\nC、struts-config.xml\nD、xwork.xml\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列关于Struts2标签的使用的描述，错误的是（   ）\nA、在JSP文件使用taglib指令导入Struts2标签库\nB、taglib指令的uri属性用于指定引入标签库描述符文件的URI\nC、prefix属性指定的前缀为空时默认为\"s\"\nD、taglib指令的prefix属性用于指定引入标签库描述符文件的前缀\n','C\n');
insert into `jh` (`timu`, `ans`) values('不属于Action接口中定义的字符串常量的是（）\nA、SUCCESS\nB、FAILURE\nC、ERROR\nD、INPUT\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列JdbcTemplate类的常用方法中，可以完成插入、更新和删除操作的是（   ）\nA、update()\nB、execute()\nC、query()\nD、delete()\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列选项中是Struts2的核心配置文件的是（）\nA、struts2.xml\nB、web.xml\nC、struts.xml\nD、struts.properties\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列Restrictions类的静态方法中，用于表示大于等于的是（   ）\nA、Restrictions.le\nB、Restrictions.lt\nC、Restrictions.ge\nD、Restrictions.eq\n','C\n');
insert into `jh` (`timu`, `ans`) values('struts2动态方法调用的格式为（）\nA、ActionName?methodName.action\nB、ActionName!methodName.action\nC、ActionName*methodName.action\nD、ActionName@mathodName.action\n','B\n');
insert into `jh` (`timu`, `ans`) values('下面代码执行结果是（）\n在action中进行如下操作：\nActionContext.getContext().put(“itcast”,”传智播客”);\n重定向到jsp页面后，在jsp页面使用标签\n<s:property value=”#itcast”>#\n<s:property value=”itcast”>#\n<s:property value=”#request.itcast”>#\nA、传智播客###\nB、传智播客#传智播客##\nC、传智播客#传智播客#传智播客#\nD、###\n','D\n');
insert into `jh` (`timu`, `ans`) values('在一般Web开发中，添加JAR包时只需将其复制到Web项目的（   ）路径下即可。\nA、src\nB、WEB-INF/lib\nC、WebContent\nD、WEB-INF\n','B\n');
insert into `jh` (`timu`, `ans`) values('如果要实现struts2的数据检验功能（）\nA、普通的Action类可以实现\nB、继承自Action接口的可以实现\nC、继承自ActionSupport类可以实现\nD、继承自ActionValidate类可以实现\n','C\n');
insert into `jh` (`timu`, `ans`) values('Customer类中有一个Set类型的orders属性，用来存放Order订单对象，在Customer.hbm.xml文件中，用哪个元素映射orders属性？（）\nA、<set>\nB、<ont-to-many>\nC、<many-to-one>\nD、<property>\n','A\n');
insert into `jh` (`timu`, `ans`) values('以下有关struts.xml文件描述正确的是（）\nA、struts.xml文件默认放置在src目录下\nB、struts.xml文件中只能配置一个package\nC、struts.xml文件可以放置在WEB-INF目录下\nD、struts.xml文件名称可以自定义，只要以struts开头就可以\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列Hibernate的检索方式中，属于官方推荐的查询方式的是（   ）\nA、HQL检索方式\nB、OID检索方式\nC、QBC检索方式\nD、SQL检索方式\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列有关AOP专业术语中，用于指那些被拦截到的点的是（   ）\nA、Joinpoint\nB、Pointcut\nC、Aspect\nD、Advice\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列有关<s:optgroup>标签的描述，错误的是（   ）\nA、<s:optgroup>标签经常与<s:select>标签联用\nB、<s:optgroup>标签的label属性表示选项组的组名\nC、<s:optgroup>标签用来生成选项组\nD、<s:select>标签不能包含多个<s:optgroup>标签\n','D\n');
insert into `jh` (`timu`, `ans`) values('下面创建Criteria对象的语句中正确的是（）\nA、Criteria c = query.createCriteria();\nB、Criteria c = query.addCriteria();\nC、Criteria c = session.createCriteria();\nD、Criteria c = session.createCriteria(User.class);\n','D\n');
insert into `jh` (`timu`, `ans`) values('下面创建Criteria对象的语句中正确的是（）\nA、Criteria c = query.createCriteria();\nB、Criteria c = query.addCriteria();\nC、Criteria c = session.createCriteria();\nD、Criteria c = session.createCriteria(User.class);\n','D\n');
insert into `jh` (`timu`, `ans`) values('基于Annotation的声明式AspectJ中，用于定义一个切面的是（   ）\nA、@AspectJ\nB、@Before\nC、@AfterReturning\nD、@Around\n','A\n');
insert into `jh` (`timu`, `ans`) values('有关Hibernate属性映射语法错误的是（）\nA、<propertyname=\"age\"/>\nB、<propertycolumn=\"age\"/>\nC、<propertyname=\"address\"column=\"addr\"/>\nD、<propertyname=\"usreName\"column=\"userName\"></property>\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列有关Hibernate中乐观锁的描述，错误的是（   ）\nA、乐观锁是基于数据版本（Version）标识实现应用程序级别上的锁定机制\nB、乐观锁一般由数据库来实现\nC、使用乐观锁时，需在*.hbm.xml映射文件中增加一个version标签元素\nD、<version>标签必须位于<id>标签之下，否则文件会报错\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列哪个结果类型用来转发到Action？（）\nA、dispatcher\nB、chain\nC、redirectAction\nD、stream\n','B\n');
insert into `jh` (`timu`, `ans`) values('Spring事务管理的核心接口中，表示事务定义对象的接口是（   ）\nA、TransactionDefinition\nB、PlatformTransactionManager\nC、TransactionStatus\nD、TransactionProxyFactoryBean\n','A\n');
insert into `jh` (`timu`, `ans`) values('QBC查询可以用于完成等于关系的短语是（）\nA、Restrictions.equals\nB、Restrictions.eq\nC、Restrictions.le\nD、Restrictions.ge\n','B\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate中，inverse属性值为（）时，会标识被控方。\nA、all\nB、false\nC、true\nD、none\n','C\n');
insert into `jh` (`timu`, `ans`) values('HIBERNATE的对象状态不包含下列哪一种？（）\nA、瞬时状态\nB、持久化状态\nC、约束状态\nD、托管状态\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列事务的隔离级别中，从低到高的排序正确的是（   ）\n①读未提交 ②序列化 ③可重复读取 ④读已提交\nA、①②③④\nB、①③②④\nC、①④③②\nD、①③④②\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列标签中，用于查看ValueStack中信息的是（   ）\nA、<s:include>\nB、<s:debug>\nC、<s:submit>\nD、<s:param>\n','C\n');
insert into `jh` (`timu`, `ans`) values('在struts2的action类中有一个User类型属性user，并且提供了user的getter和setter方法。该User中有一个属性username，并且提供了该属性的getter和setter方法，\n以下表单提交,username可以获取到值的是（）\nA、<form><inputname=\"username\"/>\nB、<form><inputname=\"user.username\"/>\nC、<form><inputname=\"#user.username\"/>\nD、<form><inputname=\"user#username\"/>\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列有关<s:checkbox>标签的描述，错误的是（   ）\nA、value属性的值为\"true\"，其选中框为选中状态\nB、value属性值是一个\"假值\"，用来表示复选框是否被选中\nC、默认情况下value的值为\"true\"\nD、默认情况下选中框为不选中状态\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列Hibernate映射配置文件命名不正确的是（）\nA、user.properties\nB、user.hbm.xml\nC、User.hbm.xml\nD、UserModel.hbm.xml\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列有关Struts2框架优势的描述，错误的是（   ）\nA、易扩展\nB、项目开源\nC、提供了强大的的标签\nD、与ServletAPI关联度高\n','D\n');
insert into `jh` (`timu`, `ans`) values('下面关于单例bean的生命周期的执行顺序，哪个在最后执行（）\nA、bean对象实例化\nB、调用<beaninit-method=\"userInitMethod\">指定初始化方法userInitMethod\nC、执行用户的自定义业务方法\nD、调用<beandestroy-method=\"userDestroyMethod\">指定销毁方法userDestroyMethod\n','D\n');
insert into `jh` (`timu`, `ans`) values('以下哪个不属于Session的方法？（）\nA、save()\nB、delete()\nC、update()\nD、open()\n','D\n');
insert into `jh` (`timu`, `ans`) values('下列有关<s:property>标签中的属性的描述，错误的是（   ）\nA、id属性是必选属性，用于指定该元素的标识\nB、如果要输出的属性值为null，则显示default属性的指定值\nC、escape属性用于指定是否忽略HTML代码\nD、value属性用于指定需要输出的属性值\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列有关，表单回显正确的是（）\nA、只要将数据放置到request作用域，struts表单标签可以根据name属性进行回显\nB、只要将数据放置到session作用域，struts表单标签可以根据name属性进行回显\nC、只要将数据放置到application作用域，struts表单标签可以根据name属性进行回显\nD、只要将数据放置到对象栈root中，struts表单标签可以根据name属性进行回显\n','A\n');
insert into `jh` (`timu`, `ans`) values('以下哪种注解格式可以定义Bean？（）\nA、@Component\nB、@Autowire\nC、@Value\nD、@Qualifier\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列代码用于完成查询操作，错误的是（）\nConfiguration conf = new Configuration().configure();\nSessionFactory sf = conf.buildSessionFactory();\nSession s = sf.getSession();\nA、s.createQuery(\"from UserModel\");\nB、s.createCriteria(UserModel.class);\nC、s.createDetachedCriteria(UserModel.class);\nD、s.createSQLQuery(\"select * from tbl_user\");\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列Struts2标签中，不属于表单标签的是（   ）\nA、<s:reset>\nB、<s:debug>\nC、<s:password>\nD、<s:checkbox>\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列有关Hibernate持久化类编写规则的描述，错误的是（   ）\nA、持久化类属性应尽量使用基本数据类型\nB、必须提供标识属性OID\nC、持久化类中所有属性使用private修饰\nD、持久化类中必须提供默认或者手动编写的无参数public构造器\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列关于<s:iterator>标签的描述，正确的是（   ）\nA、<s:iterator>标签主要用于对集合中的数据进行迭代\nB、<s:iterator>标签不能对数组进行遍历\nC、<s:iterator>标签必须与<s:if>标签结合使用\nD、<s:iterator>标签只能对集合进行遍历\n','A\n');
insert into `jh` (`timu`, `ans`) values('完成按用户名进行查询，程序片段如下：\nString hql = \"from UserModel where userName = ?\";\nQuery q = s.createQuery();\nq.________(0,”value”);\n空白处应该填写的内容为（）\nA、set\nB、get\nC、setParameter\nD、getParameter\n','C\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate中，从性能方面考虑，inverse属性值通常设置为（）\nA、all\nB、false\nC、true\nD、none\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，不属于Spring中实例化Bean的方式的是（   ）\nA、构造器实例化\nB、静态工厂方式实例化\nC、实例工厂方式实例化\nD、抽象方法实例化\n','D\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate中，<set>元素有个cascade属性，如果希望Hibernate级联保存集合中的对象，cascade属性应该取什么值（）\nA、none\nB、save\nC、delete\nD、save-update\n','D\n');
insert into `jh` (`timu`, `ans`) values('在hibernate的HQL查询中，下列说法不正确的是（）\nA、在hibernate3中，可以使用update、delete子句。\nB、在hibernate3中，不可以使用update、delete子句。\nC、HQL是基于SQL的。\nD、HQL提供了更多面向对象的封装。\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列有关Hibernate中持久化对象的状态的描述，正确的是（   ）\nA、状态可以划分为瞬时态、持久态和脱管态三种\nB、一个持久化类的实例可能同时处于三种不同状态中\nC、当某个持久化状态的实例与Session的关联被关闭时就变成了瞬时态\nD、持久态对象是在事务提交后变成持久态的\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列关于Action控制类中execute()方法要求的描述，错误的是（   ）\nA、为静态方法\nB、方法的权限修饰符为public\nC、返回一个字符串\nD、方法没有参数\n','A\n');
insert into `jh` (`timu`, `ans`) values('在struts.xml文件中，用于定义包配置的元素是（   ）\nA、<struts>\nB、<constant>\nC、<include>\nD、<package>\n','D\n');
insert into `jh` (`timu`, `ans`) values('在web.xml文件中，filter-mapping标签用来配置的是（   ）。\nA、核心过滤器\nB、过滤器的映射\nC、请求URL\nD、Servlet\n','B\n');
insert into `jh` (`timu`, `ans`) values('在hibernate的HQL查询中，setMaxResults(3)方法中参数值3指的是（）\nA、从第3条记录开始\nB、从第4条记录开始\nC、查询3条记录\nD、查询4条记录\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列有关Struts2预定义结果类型的描述，错误的是（   ）\nA、redirect是默认的结果类型\nB、redirectAction重定向到一个Action，跳转的页面中丢失传递的信息\nC、dispatcher用来转向页面，通常处理JSP\nD、chain用来处理Action链，被跳转的Action中仍能获取上个页面的值，如request信息\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列Struts2提供的主题中，属于默认主题的是（   ）\nA、simple\nB、css_xhtml\nC、Ajax\nD、xhtml\n','D\n');
insert into `jh` (`timu`, `ans`) values('完成查询用户表中的信息总量，程序片段如下:\nString hql = \"select count(uuid) from UserModel\";\nQuery q = s.createQuery(hql);\n________ count = s.uniqueResult();\n空白处应该填写的内容为（）\nA、Integer\nB、Long\nC、Float\nD、Double\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，用于创建一个密码输入框的是（   ）\nA、<s:reset>\nB、<s:radio>\nC、<s:password>\nD、<s:checkbox>\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，不属于Struts2标签库中逻辑控制标签的是（   ）\nA、<s:if>\nB、<s:elseif>\nC、<s:property>\nD、<s:iterator>\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列有关HQL语句指定别名的描述，错误的是（   ）\nA、在HQL语句中也可以使用别名\nB、别名使用关键字as指定\nC、指定别名时as关键字可以省略\nD、在HQL语句中不能使用别名\n','D\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，不属于Spring通知类型的是（   ）\nA、前置通知\nB、后置通知\nC、中置通知\nD、环绕通知\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，不属于Hibernate技术优势的是（   ）\nA、对JDBC访问数据库的代码做了轻量级封装\nB、很大程度的简化了dao（DataAccessObject，数据访问对象）层编码工作\nC、性能非常好、映射的灵活性很出色\nD、提供标准、强大的验证框架和国际化框架\n','D\n');
insert into `jh` (`timu`, `ans`) values('删除某个客户数据的同时删除该客户对应的所有订单数据，下面方法可行的是（）\nA、配置客户和订单关联的cascade属性为save-update\nB、配置客户和订单关联的cascade属性为delete\nC、配置客户和订单关联的cascade属性为delete-orphan\nD、配置客户和订单关联的inverse属性为true\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，不属于Struts2常量配置方式之一的是（   ）\nA、在struts.xml文件中使用<constant>元素配置常量\nB、在struts.properties文件中配置常量\nC、在Action类中通过定义并配置常量\nD、在web.xml文件中通过<init-param>元素配置常量\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列有关Hibernate一级缓存的描述，错误的是（   ）\nA、一级缓存是Session级别的缓存\nB、一级缓是一个可插拔的缓存插件\nC、一级缓存一般情况下无需进行干预\nD、一级缓存由Hibernate管理\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列Restrictions类的静态方法中，用于表示小于的是（   ）\nA、Restrictions.le\nB、Restrictions.lt\nC、Restrictions.ge\nD、Restrictions.eq\n','B\n');
insert into `jh` (`timu`, `ans`) values('在Struts2框架中,先后在struts.xml中、struts.properties中和web.xml中来修改struts的同一个常量，在哪个配置文件中的修改会最终生效。（）\nA、struts.xml\nB、struts.properties\nC、web.xml\nD、都不会生效\n','C\n');
insert into `jh` (`timu`, `ans`) values('通过构造函数依赖注入，使用<constructor-arg index=\"1\">，其中index=\"1\"表示（）\nA、按照参数的类型，其中1表示String类型\nB、按照参数的类型，其中1表示int类型\nC、按照参数的顺序，其中1表示第二个参数\nD、按照参数的顺序，其中1表示第一个参数\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列有关值栈的描述，错误的是（   ）\nA、值栈封装了一个应用程序所有请求所需的数据\nB、Struts2是在有请求到达的时候为每个请求创建一个新的值栈\nC、值栈是OGNL表达式存取数据的地方\nD、值栈和请求是一一对应的\n','A\n');
insert into `jh` (`timu`, `ans`) values('在hibernate的Criteria查询中，查询5条记录的方法是（）\nA、criteria.setFirstResult(4);\nB、criteria.setFirstResult(5);\nC、criteria.setMaxResult(4);\nD、criteria.setMaxResult(5);\n','D\n');
insert into `jh` (`timu`, `ans`) values('下列有关Bean的作用域的描述，错误的是（   ）\nA、singleton是Spring容器默认的作用域\nB、使用singleton定义的bean在Spring容器中将只有一个实例\nC、使用request定义的Bean时，在一次HTTP请求中容器会返回该Bean的同一个实例\nD、每次通过Spring容器获取的singleton定义的Bean时，容器都将创建一个新的Bean实例\n','D\n');
insert into `jh` (`timu`, `ans`) values('下列有关OGNL的描述，错误的是（   ）\nA、OGNL支持赋值操作和表达式串联\nB、OGNL不是开源的表达式语言\nC、OGNL可以操作集合对象\nD、OGNL支持类静态方法调用和值访问\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列有关持久化对象状态转换的描述，错误的是（   ）\nA、脱管态不能转换为瞬时态\nB、通过为瞬时态对象设置OID，可以将瞬时态转换为脱管态\nC、执行Session的evict()、close()或clear()方法可以将持久态转换为脱管态\nD、执行Session的update()、saveOrUpdate()或lock()方法可以将脱管态转换为持久态\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列有关Struts2的表单标签的描述，错误的是（   ）\nA、<s:checkbox>标签用于创建复选框\nB、<s:radio>标签用于创建单选按钮\nC、<s:password>标签用于创建一个密码输入框\nD、<s:textarea>标签用于创建单行文本框\n','C\n');
insert into `jh` (`timu`, `ans`) values('在hibernate的Criteria查询中，从第5条记录开始查询的方法是（）\nA、criteria.setFirstResult(4);\nB、criteria.setFirstResult(5);\nC、criteria.setMaxResult(4);\nD、criteria.setMaxResult(5);\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列Struts2标签中，用于一次性创建多个复选框的是（   ）\nA、<s:checkboxlist>\nB、<s:checkbox>\nC、<s:select>\nD、<s:textarea>\n','A\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate中对事务进行配置时，其中hibernate.connection.isolation参数用来配置事务的隔离级别，下列整数中表示用于读未提交的是（   ）\nA、8\nB、4\nC、2\nD、1\n','D\n');
insert into `jh` (`timu`, `ans`) values('下列有关Hibernate中核心接口Transaction的描述，错误的是（   ）\nA、Transaction接口主要用于管理事务\nB、Transaction是Hibernate的数据库事务接口，且对底层的事务接口进行了封装\nC、Session执行完数据库操作后，事务将自动提交\nD、Transaction接口中提供了一个wasCommitted()方法，用于检查事务是否提交\n','C\n');
insert into `jh` (`timu`, `ans`) values('在OGNL操作符的使用是。\nA、取出符合选择逻辑的第一个元素。\nB、取出符合选择逻辑的最后一个元素。\nC、取出符合选择逻辑的所有元素。\nD、以上说法都不对。\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，符合数据库中多表之间一对一关系的是（   ）\nA、学生和课程\nB、客户和订单\nC、身份证号和公民\nD、学生和班级\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列有关AOP专业术语中，用于表示被拦截的连接点的是（   ）\nA、Joinpoint\nB、Pointcut\nC、Aspect\nD、Advice\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，属于Struts2.3.24版本核心过滤器类的是（   ）\nA、StrutsPrepareAndExecuteFilter\nB、StrutsPrepareAndDispatcherFilter\nC、FilterDispatcher\nD、StrutsFilter\n','A\n');
insert into `jh` (`timu`, `ans`) values('struts2中，以下配置文件上传拦截器只允许上传bmp图片文件的代码，正确的是（）\nA、<paramname=”allowedTypes”>image/bmp</param>\nB、<paramname=”allowedTypes”>*.bmp</param>\nC、<paramname=”allowedTypes”>bmp</param>\nD、<paramname=”allowedTypes”>image/*.bmp</param>\n','A\n');
insert into `jh` (`timu`, `ans`) values('下列关于<action>元素中属性的描述，错误的是（   ）\nA、在配置action元素时，如果没有指定class属性值，则其默认值为com.opensymphony;.xwork2.ActionSupport类\nB、如果不指定method属性，则Action会调用execute()方法\nC、在配置action元素时，需指定class属性值，否则程序启动会报错\nD、method属性用于指定请求Action时调用的方法\n','C\n');
insert into `jh` (`timu`, `ans`) values('spring的配置文件中，使用 <property name=\"age\"></property>，对age的属性注入20应该使用（）\nA、ref=\"20\"\nB、value=\"20\"\nC、value=20\nD、values=\"20\"\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，不属于依赖注入实现方式的是（   ）\nA、接口注入\nB、抽象类注入\nC、setter方法注入\nD、构造方法注入\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列JdbcTemplate类的常用方法中，能够完成执行SQL语句功能的是（   ）\nA、update()\nB、execute()\nC、query()\nD、delete()\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列有关<s:reset>标签作用的描述，正确的是（   ）\nA、用来创建一个重置按钮\nB、用来创建隐藏表单元素\nC、用来创建一个文件选择框\nD、用来创建一个单行文本框\n','A\n');
insert into `jh` (`timu`, `ans`) values('在hibernate的HQL查询中，setFirstResult(3)方法中参数值3值的是（）\nA、从第3条记录开始\nB、从第4条记录开始\nC、查询3条记录\nD、查询4条记录\n','B\n');
insert into `jh` (`timu`, `ans`) values('下列关于常量配置的描述，错误的是（   ）\nA、在struts.xml文件中通过<constant…/>元素来配置常量时，需要指定两个必填的属性name和value。\nB、struts.properties文件能配置的常量都可以在struts.xml文件中用<constant>元素来配置。\nC、struts.properties文件应存放于项目的src路径下\nD、在多个文件中配置了同一个Struts2常量，Struts2框架加载常量是有一定顺序的\n','C\n');
insert into `jh` (`timu`, `ans`) values('下列不是Struts2项目所依赖的基础JAR包是？（）\nA、asm-3.3.jar\nB、xwork-core-2.3.24.jar\nC、commons-io-2.2.jar\nD、antlr-2.7.6.jar\n','D\n');
insert into `jh` (`timu`, `ans`) values('以下属于struts2配置文件中的配置元素是（）\nA、<package>\nB、<action>\nC、<form-beans>\nD、<action-mappings>\n','A,B\n');
insert into `jh` (`timu`, `ans`) values('完成用户名与用户地址的查询，程序片段如下：\nString hql = \"select userName,address from UserModel\";\nQuery q = s.createQuery(hql);\nList<___________> list = s.list();\n空白处可以填写的内容为（）\nA、Object\nB、String,String\nC、Object[]\nD、String[]\n','C,D\n');
insert into `jh` (`timu`, `ans`) values('关于struts2的配置文件描述正确的是（）\nA、必须在WEB-INF目录下\nB、名字必须为struts.xml\nC、配置Action时，必须配置<package>\nD、使用<forward>元素配置转发\n','B,C\n');
insert into `jh` (`timu`, `ans`) values('下列关于<action>元素属性的描述，正确有（   ）\nA、name指定了Action所处理的请求的URL\nB、method指定请求Action时调用的方法\nC、method是必选属性\nD、converter指定类型转换器的类\n','A,B,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关OGNL的描述，正确的有（   ）\nA、OGNL的全称是对象图导航语言\nB、OGNL是一种功能强大的开源表达式语言\nC、OGNL支持对象方法调用，但是只能是静态方法\nD、OGNL可以存取Java对象的任意属性\n','A,B,D\n');
insert into `jh` (`timu`, `ans`) values('以下哪些是Action接口提供的返回值？（）\nA、success\nB、none\nC、error\nD、input\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关<s:checkbox>标签的描述，正确的有（   ）（\nA、默认情况下选中框为选中状态\nB、value属性值是一个\"假值\"，用来表示复选框是否被选中\nC、默认情况下value的值为\"false\"\nD、value属性的值为\"true\"，其选中框为选中状态\n','A,B,D\n');
insert into `jh` (`timu`, `ans`) values('关于struts2哪些api是正确的？\nA、ServletActionContext.getRequest()可以获得HttpServletRequest\nB、ServletActionContext.getResponse()可以获得HttpServletResponse\nC、ServletActionContext.getServletContext()可以获得ServletContext\nD、ServletActionContext.getRequest().getSession()可以获得HttpSession\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列关于<s:form>标签的描述，正确的有（   ）\nA、<s:form>元素中不可以包含其他表单元素\nB、<s:form>元素的action属性在指定提交时对应的action，需要.action后缀\nC、<s:form>标签用来呈现HTML语言中的表单元素\nD、在使用<s:form>标签时，一般会包含其它的表单元素\n','C,D\n');
insert into `jh` (`timu`, `ans`) values('以下属于struts2配置文件中的配置元素是（）\nA、<package>\nB、<action>\nC、<form-beans>\nD、<action-mappings>\n','A,B\n');
insert into `jh` (`timu`, `ans`) values('以下属于struts2标签的是（）\nA、Ajax标签\nB、数据访问标签\nC、logic标签\nD、bean标签\n','A,B\n');
insert into `jh` (`timu`, `ans`) values('以下关于定义Bean的作用域正确的是（）\nA、@Scope(\"all\")\nB、@Scope(\"none\")\nC、@Scope(\"singleton\")\nD、@Scope(\"prototype\")\n','C,D\n');
insert into `jh` (`timu`, `ans`) values('Struts2框架由下列哪些框架发展而来（   ）\nA、Hibernate\nB、Struts\nC、Spring\nD、WebWork\n','B,D\n');
insert into `jh` (`timu`, `ans`) values('以下实现Action控制类的正确方式的是（）\nA、pojo类\nB、继承ActionSupport类\nC、实现Action接口\nD、以上都不对\n','A,B,C\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，属于事务四个隔离级别之一的有（   ）\nA、读未提交\nB、读已提交\nC、可重复读取\nD、序列化\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，属于依赖注入实现方式的是（   ）\nA、接口注入\nB、构造方法注入\nC、setter方法注入\nD、抽象类注入\n','A,B,C\n');
insert into `jh` (`timu`, `ans`) values('下列有关<s:select>标签属性的描述中，正确的有（   ）\nA、headerKey和headerValue属性需要同时使用\nB、size属性可以让下拉框同时显示多个值\nC、multiple属性让用户同时选择多个值\nD、listKey和listValue属性能用于在所有的真实选项之前加一项作为标题项\n','A,B,C\n');
insert into `jh` (`timu`, `ans`) values('有关QBC查询短语，下列说法正确的是（）\nA、Restrictions.between表示范围比对\nB、Restrictions.eq表示等比对\nC、Restrictions.le表示小于等于比对\nD、Restrictions.ge表示大于等于比对\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列哪些是属于Hibernate的查询方式？（）\nA、关联查询\nB、分页查询\nC、参数查询\nD、投影查询\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('Struts2开发的应用由哪些组件构成？（）\nA、控制器组件\nB、业务组件\nC、模型组件\nD、视图组件\n','A,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关值栈的描述，正确的有（   ）\nA、值栈是OGNL表达式存取数据的地方\nB、Struts2是在有请求到达的时候为每个请求创建一个新的值栈\nC、值栈和请求是一一对应的\nD、值栈封装了一次请求所需要的所有数据\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列哪些是Spring3.2.2版本导入相关的JAR包？（）\nA、spring-core-3.2.2.RELEASE.jar\nB、log4j-1.2.17.jar\nC、commons-logging-1.2.jar\nD、spring-context-3.2.2.RELEASE.jar\n','A,C,D\n');
insert into `jh` (`timu`, `ans`) values('ServleteActionContext类用来获取Servlet API的方法有哪些？（）\nA、getRequest()\nB、getResponse()\nC、getSession()方法返回值类型为HttpSession\nD、getServletContext()\n','A,B,D\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，属于Struts2常量配置方式的是（   ）\nA、在struts.xml文件中使用<constant>元素配置常量\nB、在struts.properties文件中配置常量\nC、在Action类中通过定义并配置常量\nD、在web.xml文件中通过<init-param>元素配置常量\n','A,B,D\n');
insert into `jh` (`timu`, `ans`) values('下列哪些是Hibernate版本导入相关的JAR包？（）\nA、jta-1.1.jar\nB、dom4j-1.6.1.jar\nC、commons-io.2.2.jar\nD、commons-logging-1.2.jar\n','A,B\n');
insert into `jh` (`timu`, `ans`) values('下列有关<s:property>标签中的属性的描述，正确的有（   ）\nA、id属性是必选属性，用于指定该元素的标识\nB、如果要输出的属性值为null，则显示default属性的指定值\nC、escape属性用于指定是否忽略HTML代码\nD、value属性用于指定需要输出的属性值\n','B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列哪些是Hibernate连接MySQL数据库相关配置？？（）\nA、<propertyname=”hibernate.dialect”>org.hibernate.dialect.MySQLDialect</property>\nB、<propertyname=”hibernate.connection.driver_class”>com.mysql.jdbc.Driver</property>\nC、<propertyname=”format_sql”>true</property>\nD、<propertyname=”hibernate.connection.username”>root</property>\n','B,D\n');
insert into `jh` (`timu`, `ans`) values('struts2 action类的编写，下列说法正确的是（）\nA、action类可以不继承任何类，不实现任何接口\nB、action类可以实现struts提供的接口Action\nC、action类可以继承ActionSupport\nD、action类中请求处理方法，必须是共有的，方法名称自定义，且没有参数。\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('实现下列哪些接口可以让Action直接访问Servlet API?（）\nA、ServletRequestAware\nB、ServletResponseAware\nC、HttpSession\nD、ServletContextAware\n','A,B,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关OGNL的表达式的描述，正确的有（   ）\nA、表达式是整个OGNL的核心\nB、OGNL会根据表达式去对象中取值\nC、表达式就是一个带有语法含义的字符串\nD、表达式规定了操作的类型和操作的内容\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列关于Struts2标签库的描述，正确的有（   ）\nA、Struts2标签库主要分为普通标签和UI标签\nB、UI标签是以丰富而可复用的HTML文件来显示数据\nC、普通标签主要是在页面生成时控制执行的流程\nD、使用标签库中的标签有利于代码的可维护性和可读性\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('以下哪种注解格式可以定义Bean？（）\nA、@Repository\nB、@Service\nC、@Controller\nD、@Component\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('有关HIBERNATE瞬时对象状态说法错误的是（）\nA、瞬时状态的对象具有OID，与SESSION对象关联\nB、瞬时状态的对象具有OID，不与SESSION对象关联\nC、瞬时状态的对象不具有OID，与SESSION对象关联\nD、瞬时状态的对象不具有OID，不与SESSION对象关联\n','A,B,C\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，属于设值注入要求一个Bean必须满足的要求有（   ）\nA、Bean类必须提供一个默认的构造方法\nB、Bean类必须提供一个有参的构造方法\nC、Bean类必须为需要注入的属性提供对应的get方法\nD、Bean类必须为需要注入的属性提供对应的set方法\n','A,D\n');
insert into `jh` (`timu`, `ans`) values('当Action只有一个请求处理方法execute()，并且Action继承了ActionSupport类，那么对请求参数的校验代码可以放到名称（）方法中。\nA、validate\nB、validateParams\nC、validateExecute\nD、validateParameters\n','A,C\n');
insert into `jh` (`timu`, `ans`) values('下列OID生成策略错误的是（）\nA、auto\nB、identity\nC、uuid\nD、random\n','A,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关Hibernate中核心接口Session的描述，正确的有（   ）\nA、Session是线程不安全的\nB、多个并发线程同时操作一个Session实例时，可能导致Session数据存取的混乱\nC、通过SessionFactory实例的openSession()方法可以获取Session实例\nD、通过SessionFactory实例的getCurrentSession()方法可以获取Session实例\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列哪些规则不能作为Hibernate持久化类定义的规范？（）\nA、声明可访问的无参构造方法\nB、为所有属性提供getter与setter方法\nC、声明为最终类(final修饰)\nD、为实体模型类实现序列化接口\n','C,D\n');
insert into `jh` (`timu`, `ans`) values('Action类中的符合execute()方法的返回值的有（）\nA、SUCCESS\nB、”SUCCESS”\nC、”success”\nD、null\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('Bean的作用域不包含以下哪个范围（）\nA、singleton\nB、prototype\nC、all\nD、none\n','C,D\n');
insert into `jh` (`timu`, `ans`) values('下列名称可以用于作为Hibernate映射配置名的是？（）\nA、User.cfg.xml\nB、User.xml\nC、UserModel.hbm.xml\nD、user.properties\n','A,B,C\n');
insert into `jh` (`timu`, `ans`) values('下列哪些选项能实现struts2入门程序？（）\nA、普通的Action类可以实现\nB、继承自Action接口的可以实现\nC、继承自ActionSupport类可以实现\nD、继承自ActionValidate类可以实现\n','A,B,C\n');
insert into `jh` (`timu`, `ans`) values('Hibernate配置文件hibernate.cfg.xml中，不包括下面的（）\nA、“对象关系映射”信息\nB、实体间关联的配置\nC、show_sql等参数的配置\nD、数据库连接信息\n','A,B\n');
insert into `jh` (`timu`, `ans`) values('下哪些api，可以获得值栈对象？（）\nA、ActionContext.getContext().getValueStack();\nB、ActionContext.getRequest().getValueStack();\nC、ServletActionContext.getReuqest().getAttribute(\"struts.valueStack\");\nD、ServletActionContext.getServletContext().getAttribute(\"struts.valueStack\");\n','A,C\n');
insert into `jh` (`timu`, `ans`) values('下列哪些技术可以用于完成数据库的添加操作？（）\nA、JDBC\nB、ApacheDBUtils\nC、struts2\nD、Hibernate\n','A,B,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关Hibernate持久化类编写规则的描述，正确的有（   ）\nA、持久化类中必须提供默认或者手动编写的无参数public构造器\nB、必须提供标识属性OID\nC、持久化类不要用final修饰\nD、持久化类属性应尽量使用基本数据类型\n','A,B,C\n');
insert into `jh` (`timu`, `ans`) values('hibernate 支持二级缓存技术有（）\nA、EHCache\nB、OSCache\nC、SwarmCache\nD、JBossCache\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列哪些是package元素的属性？（）\nA、name\nB、extends\nC、value\nD、abstract\n','A,B,D\n');
insert into `jh` (`timu`, `ans`) values('Bean的属性注入可以通过以下方式完成（）\nA、构造器注入\nB、setter注入\nC、getter注入\nD、静态方法注入\n','A,B\n');
insert into `jh` (`timu`, `ans`) values('下列有关package元素中的extends属性的描述，正确的有（   ）\nA、extends属性是可选属性\nB、一个package元素中的extends属性可以出现多次\nC、extends属性一次只能继承一个包\nD、extends属性指定该包继承自其他包\n','A,D\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate中，如果需要级联删除，则cascade属性值可为（）\nA、all\nB、save-update\nC、none\nD、delete\n','A,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关Spring的IOC容器ApplicationContext的描述，正确的有（   ）\nA、ApplicationContext是BeanFactory的子接口\nB、ApplicationContext被称为应用上下文\nC、ApplicationContext提供BeanFactory所有的功能\nD、ApplicationContext以一种更加面向框架的方式增强了BeanFactory的功能\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate中，属于二级缓存分类的有（   ）\nA、类级别的缓存\nB、查询级别的缓存\nC、集合级别的缓存\nD、Session级别的缓存\n','A,B,C\n');
insert into `jh` (`timu`, `ans`) values('下列有关Hibernate中乐观锁的描述，正确的有（   ）\nA、乐观锁是基于数据版本（Version）标识实现应用程序级别上的锁定机制\nB、乐观锁一般由数据库来实现\nC、使用乐观锁时，需在*.hbm.xml映射文件中增加一个version标签元素\nD、<version>标签必须位于<id>标签之下，否则文件会报错\n','A,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关<s:hidden>标签的描述，正确的有（   ）\nA、<s:hidden>标签用于创建隐藏表单元素\nB、<s:hidden>标签可以生成HTML中的隐藏域标签<inputtype=\"hidden\">\nC、<s:hidden>标签在页面上没有任何显示\nD、<s:hidden>标签可以保存或交换数据\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关Bean的作用域的描述，正确的有（   ）\nA、prototype是Spring容器默认的作用域\nB、每次通过Spring容器获取的prototype定义的Bean时，容器都将创建一个新的Bean实例\nC、使用request定义的Bean时，在一次HTTP请求中容器会返回该Bean的同一个实例\nD、使用singleton定义的bean在Spring容器中将只有一个实例\n','B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关Struts2的表单标签的描述，正确的有（   ）\nA、<s:textfield>标签用于创建单行文本框\nB、<s:textarea>标签用于创建多行文本框\nC、<s:textarea>标签可以通过使用cols属性指定多行文本框的列数\nD、<s:textfield>标签可以通过使用value属性指定单行文本框的当前值\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，属于数据库中多表之间关系的有（   ）\nA、多对多\nB、一对多\nC、一对一\nD、以上均不正确\n','A,B,C\n');
insert into `jh` (`timu`, `ans`) values('下列有关<s:param>标签的描述，正确的有（   ）\nA、<s:param>标签通常要与其它标签合起来使用\nB、<s:param>标签主要用来为其它标签提供参数\nC、<s:param>标签可以使用value属性指定参数值\nD、<s:param>标签可以通过标签体来指定参数值\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列关于Action控制类中execute()方法要求的描述，正确的有（   ）\nA、方法的权限修饰符为public\nB、返回一个字符串\nC、方法没有参数\nD、为静态方法\n','A,B,C\n');
insert into `jh` (`timu`, `ans`) values('完成按照用户年龄进行查询，下列程序片段如下：\nString hql = \"from UserModel where age = ?\";\nQuery q = s.createQuery(hql);\nq.________(0,18);\n空白处可以填写的内容为（）\nA、setInteger\nB、getInteger\nC、setParameter\nD、getParameter\n','A,C\n');
insert into `jh` (`timu`, `ans`) values('下列有关<s:checkboxlist>标签的描述，正确的有（   ）\nA、<s:checkboxlist>标签用于一次性创建多个复选框\nB、用户可以选择创建零到多个<s:checkboxlist>标签\nC、<s:checkboxlist>标签用来产生一组<inputtype=\"checkbox\"/>标签\nD、listValue属性用于生成checkbox后面显示的文字\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列关于package元素常用属性的描述，正确的有（   ）\nA、name用于指定该包的名字\nB、namespace是必选属性\nC、extends属性一次只能继承一个包\nD、abstract属性的值为true时，说明该包是抽象包\n','A,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关Spring框架的描述，正确的有（   ）\nA、Spring是持久层框架\nB、Spring是JavaWeb开发框架\nC、Spring是开源框架\nD、Spring是一个重量级框架\n','B,C\n');
insert into `jh` (`timu`, `ans`) values('下列关于Struts2的说法正确的是（）\nA、项目开源，使用及拓展方便\nB、Struts2框架比Struts1更加灵活、高效，满足开发需求。\nC、Struts2是以Struts1为内核的框架。\nD、Struts2属于MVC框架。\n','A,B,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关HQL语句指定别名的描述，正确的有（   ）\nA、在HQL语句中也可以使用别名\nB、别名使用关键字as指定\nC、指定别名时as关键字可以省略\nD、指定别名时as关键字不能省略\n','A,B,C\n');
insert into `jh` (`timu`, `ans`) values('下列关于拦截器的配置的描述，正确的有（   ）\nA、拦截器的配置是在struts.xml文件中完成的\nB、拦截器的配置是通过<interceptor>标签进行的\nC、要想让拦截器起作用，需先对它进行配置\nD、在定义拦截器时可以传入参数\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，属于Struts2标签库中逻辑控制标签的有（   ）\nA、<s:else>\nB、<s:form>\nC、<s:iterator>\nD、<s:property>\n','A,C\n');
insert into `jh` (`timu`, `ans`) values('下列有关Struts2 内置主题的描述，正确的有（   ）\nA、xhtml为默认主题\nB、css_xhtml主题是对xhtml的扩展，在xhtml的基础之上添加对CSS的支持和控制\nC、xhtml主题有一定的局限性，难以胜任复杂的页面布局\nD、可以通过设置来改变Struts默认主题\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('关于HQL查询，下列说法正确的有（）\nA、HQL查询的select子句中必须区分大小写。\nB、HQL支持不统计函数。\nC、HQL支持仅查询对象的某几个属性，查询结果保存于Object数组中。\nD、HQL查询为官方推荐的查询方式。\n','C,D\n');
insert into `jh` (`timu`, `ans`) values('进行Hibernate属性配置时，不能使用下列哪种配置格式？（）\nA、<propertyname=\"name\">\nB、<propertycolumn=\"age\">\nC、<property\"address\"=name\"addr\"=column>\nD、<propertyname=\"usreName\"column=\"userName\"></property>\n','B,C\n');
insert into `jh` (`timu`, `ans`) values('下列有关Hibernate中核心接口Transaction的描述，正确的有（   ）\nA、Session执行完数据库操作后，事务将自动提交\nB、Transaction接口中提供了一个wasCommitted()方法，用于检查事务是否提交\nC、Transaction接口主要用于管理事务\nD、Transaction是Hibernate的数据库事务接口，且对底层的事务接口进行了封装\n','B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关Hibernate一级缓存的描述，正确的有（   ）\nA、一级缓存是Session级别的缓存\nB、一级缓存由Hibernate管理\nC、一级缓存一般情况下无需进行干预\nD、一级缓是一个可插拔的缓存插件\n','A,B,C\n');
insert into `jh` (`timu`, `ans`) values('下列关于常量配置的描述，正确的是（   ）\nA、在struts.xml文件中通过<constant…/>元素来配置常量时，需要指定两个必填的属性name和value。\nB、struts.properties文件能配置的常量都可以在struts.xml文件中用<constant>元素来配置。\nC、struts.properties文件应存放于项目的src路径下\nD、在web.xml文件中无法进行常量配置\n','A,null\n');
insert into `jh` (`timu`, `ans`) values('已知系统中的tbl_user表对应的实体类是User,下列HQL语句中正确的是（）\nA、fromUser\nB、select*fromtbl_user\nC、selectUserfromUser\nD、fromUseruwhereu.uname=\"15\"\n','A,D\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，不属于设值注入要求一个Bean必须满足的要求有（   ）\nA、Bean类必须提供一个默认的构造方法\nB、Bean类必须为需要注入的属性提供对应的set方法\nC、Bean类必须为需要注入的属性提供对应的get方法\nD、Bean类必须提供一个有参的构造方法\n','C,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关Hibernate中持久化对象的状态的描述，正确的有（   ）\nA、状态可以划分为瞬时态、持久态和脱管态三种\nB、持久态对象是在事务还未提交前变成持久态的\nC、当某个持久化状态的实例与Session的关联被关闭时就变成了瞬时态\nD、一个持久化类的实例可能处于三种不同状态中的某一种\n','A,B,D\n');
insert into `jh` (`timu`, `ans`) values('下列关于OGNL中Context对象的描述，正确的有（   ）\nA、Context是一个Map类型的对象\nB、Root对象所在环境就是OGNL的上下文环境（Context）\nC、上下文环境Context规定了OGNL的操作\"在哪里进行\"\nD、使用OGNL表达式可以获取Context对象中的内容\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('持久化类的编写规则有哪些？（）\nA、提供一个无参数public访问控制符的构造器\nB、提供一个标识属性，映射数据表主键字段\nC、所有属性提供public访问控制符的setget方法\nD、属性应尽量使用基本数据类型的包装类型\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列关于<s:debug>标签的描述，正确的有（   ）\nA、<s:debug>标签用于在调试程序时输出更多的调试信息\nB、<s:debug>标签主要输出ValueStack和StackContext中的信息\nC、<s:debug>标签只有一个id属性，且一般不使用\nD、使用<s:debug>标签后，网页中会生成一个[Debug]的链接\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关<s:param>标签的描述，错误的有（   ）\nA、<s:param>标签可以使用value属性指定参数值\nB、<s:param>标签主要用来为其它标签提供参数\nC、<s:param>标签不能与其它标签合起来使用\nD、<s:param>标签通过标签体来指定参数值时需要加单引号\n','C,D\n');
insert into `jh` (`timu`, `ans`) values('JdbcTemplate类包含的对数据库的基本操作有（   ）\nA、添加\nB、修改\nC、查询\nD、删除\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('在值栈的上下文Context中，存在一些固定的key表示不同的对象，以下描述正确的是（）\nA、request，表示request作用域的数据\nB、.session，表示session作用域的数据\nC、application，表示application作用域的数据\nD、parameters，表示请求参数的所有数据\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关Hibernate中悲观锁的描述，正确的有（   ）\nA、在整个数据处理过程中，会把数据处于锁定状态\nB、悲观锁一般由数据库来实现\nC、悲观锁可能导致长时间的等待问题\nD、悲观锁是指在每次操作数据时，总是悲观地认为会有其他事务也会来操作同一数据\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，属于Hibernate检索方式的有（   ）\nA、导航对象图检索方式\nB、OID检索方式\nC、HQL检索方式\nD、SQL检索方式\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关拦截器的描述，正确的有（   ）\nA、拦截器可以动态拦截Action调用的对象\nB、拦截器在一个Action执行前后进行拦截\nC、对应各个功能的拦截器按照一定的顺序排列在一起形成拦截器链\nD、拦截器链组成的集合是拦截器栈\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('在struts2访问servlet的API，下面说法正确的是？\nA、可以通过ActionContext解耦和的方式，间接的操作servlet的三个作用域\nB、ServletActionContext提供了访问servlet常用对象的方法。例如：getServletContex()等\nC、struts提供若干接口直接给action注入相应的对象。例如：ServletContextAware可以给当前action注入ServletContext对象\nD、ServletActionContext.getRequest()可以获得HttpServletRequest对象。\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关Hibernate框架的描述，正确的有（   ）\nA、Hibernate是一个开源框架\nB、Hibernate对JDBC进行了轻量级的对象封装\nC、Hibernate简化了程序的代码量、提高了工作效率\nD、Hibernate使得Java开发人员可以使用面向对象的编程思想来操作数据库\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列关于Hibernate中持久化对象瞬时态的描述，正确的有（   ）\nA、瞬时态也称为临时态或者自由态\nB、瞬时状态的对象在内存中是孤立存在的，与数据库中的数据无任何关联\nC、瞬时态不存在持久化标识OID\nD、瞬时态的实例是由new命令创建、开辟内存空间的对象\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关<result>元素属性的描述，正确的有（   ）\nA、<result>元素可以有name和type属性\nB、<result>元素中的name属性是必选属性\nC、type属性用于指定返回的视图资源的类型\nD、type属性的默认值是dispatcher\n','A,C,D\n');
insert into `jh` (`timu`, `ans`) values('下面关于在Spring中配置Bean的id属性的说法正确的是（）\nA、id属性是必须的，没有id属性就会报错。\nB、id属性不是必须的，可以没有。\nC、id属性的值可以重复。\nD、id属性的值不可以重复。\n','B,D\n');
insert into `jh` (`timu`, `ans`) values('下列Struts2标签中，属于表单标签的有（   ）\nA、<s:a>\nB、<s:debug>\nC、<s:reset>\nD、<s:checkbox>\n','C,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关模型驱动的描述，正确的有（   ）\nA、Action类必须实现ModelDriven接口\nB、Action类需重写ModelDriven接口的getModel()方法\nC、模型驱动方式通过JavaBean模型进行数据传递。\nD、getModel()方法返回的是String类型的字符串\n','A,B,C\n');
insert into `jh` (`timu`, `ans`) values('下列关于<include>元素的描述中，正确的有（   ）\nA、每一个被包含的配置文件都是标准的Struts2配置文件\nB、配置<include>元素时，需指定一个必选的file属性\nC、每一个被包含的配置文件不需再包含DTD信息、Struts2配置文件的根元素等信息\nD、<include>元素进行包含配置体现的是软件工程中的\"分而治之\"原则\n','A,B,D\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，属于事务并发可能发生的问题的有（   ）\nA、一个事务读取到另一个事务未提交的数据。\nB、一个数据库中的事务读到另一个数据库中的数据\nC、两个事务都同时更新一行数据，后提交（或撤销）的事务将前面事务提交的数据覆盖了\nD、一个事务对同一行数据重复读取两次，但是却得到了不同的结果\n','A,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关Restrictions类中静态方法的描述，正确的有（   ）\nA、Restrictions.eq表示等于\nB、Restrictions.gt表示大于\nC、Restrictions.le表示小于\nD、Restrictions.and表示and关系\n','A,B,D\n');
insert into `jh` (`timu`, `ans`) values('以下关于OGNL的说法正确的是（）\nA、ActionContext是OGNL的上下文环境。\nB、StackContext是OGNL的上下文环境。\nC、ValueStack是OGNL的根。\nD、ActionContext是OGNL的根。\n','A,C\n');
insert into `jh` (`timu`, `ans`) values('下列有关<s:optgroup>标签的描述，正确的有（   ）\nA、<s:optgroup>标签用来生成选项组\nB、<s:optgroup>标签经常与<s:select>标签联用\nC、<s:select>标签不能包含多个<s:optgroup>标签\nD、<s:optgroup>标签的label属性表示选项组的组名\n','A,B,D\n');
insert into `jh` (`timu`, `ans`) values('在demo struts2项目中，如下配置struts，其他项使用默认，如何可以访问到action?（）\n<package namespace=\"/hello\">\n<action name=\"worldAction\">\nA、http://localhost:8080/demo/hello/worldAction\nB、http://localhost:8080/hello/worldAction\nC、http://localhost:8080/demo/hello/worldAction.action\nD、http://localhost:8080/demo/world/worldAction\n','A,C\n');
insert into `jh` (`timu`, `ans`) values('下列有关文件上传的描述，正确的有（   ）\nA、文件上传需要用到<s:file>标签\nB、文件上传需将form表单的enctype属性值设置为multipart/form-data\nC、文件上传时表单的method属性必须设置成post提交方式\nD、文件上传是指将本地文件上传到服务器的指定目录下\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关<s:iterator>标签属性的描述，正确的有（   ）\nA、step属性的默认值为0\nB、begin属性的默认值为1\nC、status属性表示迭代过程中的状态\nD、status属性的默认值为false\n','C,D\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，属于事务四个特性之一的有（   ）\nA、隔离性\nB、持久性\nC、一致性\nD、原子性\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，属于Hibernate技术优势的有（   ）\nA、提供强大的、可以有效减少页面代码的标签\nB、很大程度的简化了dao（DataAccessObject，数据访问对象）层编码工作\nC、支持很多关系型数据库，从一对一到多对多的各种复杂关系\nD、提供标准、强大的验证框架和国际化框架\n','B,C\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，不属于Spring中实例化Bean的方式的有（   ）\nA、构造器实例化\nB、静态工厂方式实例化\nC、实例工厂方式实例化\nD、抽象方法实例化\n','A,B,C\n');
insert into `jh` (`timu`, `ans`) values('下列有关*.hbm.xml映射文件的hibernate-mapping元素属性的描述，正确的有（   ）\nA、default-lazy属性指定Hibernate默认所采用的延迟加载策略\nB、default-lazy属性值默认为true\nC、default-cascade属性指定默认的级联样式\nD、default-cascade属性值默认为空\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，属于<action>元素属性的有（   ）\nA、name\nB、method\nC、type\nD、converter\n','A,B,D\n');
insert into `jh` (`timu`, `ans`) values('下列关于Struts2标签的使用的描述，正确的有（   ）\nA、在JSP文件使用taglib指令导入Struts2标签库\nB、taglib指令的uri属性用于指定引入标签库描述符文件的URI\nC、taglib指令的prefix属性用于指定引入标签库描述符文件的前缀\nD、在JSP文件中，所有的Struts2标签库的建议使用\"s\"前缀\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('一般情况下，以下哪个选项不是关系数据模型与对象模型之间的匹配关系。\nA、表对应类\nB、记录对应对象\nC、表的字段对应类的属性\nD、表之间的参考关系对应类之间的依赖关系\n','B,D\n');
insert into `jh` (`timu`, `ans`) values('下列对ActionContext类方法描述正确的是（）\nA、put()和get()方法用来操作request域\nB、getParameters()方法等同于request.getParametereMap()方法\nC、getSession()方法返回值类型为HttpSession\nD、getApplication()方法返回值类型为ServletContext\n','A,B\n');
insert into `jh` (`timu`, `ans`) values('下列有关Hibernate缓存的描述，正确的有（   ）\nA、Hibernate的缓存分为一级缓存和二级缓存\nB、Hibernate的一级缓存和二级缓存都位于持久化层\nC、二级缓存为Hibernate的内置缓存，不能被卸载\nD、Hibernate的缓存存储的都是数据库数据的备份\n','A,B,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关自定义拦截器的描述，正确的有（   ）\nA、与实现Interceptor接口相比，继承AbstractInterceptor类进行自定义拦截器的方法更为简单。\nB、Struts2的内置拦截器可以完成大部分的拦截任务，因此不推荐自定义拦截器\nC、如果需要开发自己的拦截器类，就需要直接或间接的实现Interceptor接口\nD、继承抽象拦截器类AbstractIntercepter也可以自定义拦截器\n','A,C,D\n');
insert into `jh` (`timu`, `ans`) values('下列有关<bean>元素中属性的描述，正确的有（   ）\nA、id属性是一个Bean的唯一标识符\nB、name属性中只能为Bean指定一个名称\nC、HTML文件格式\nD、Properties文件格式\n','A,B,D\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，属于Spring框架优点的有（   ）\nA、方便解耦、简化开发\nB、AOP编程的支持\nC、方便集成各种优秀框架\nD、声明式事务的支持\n','A,B,C,D\n');
insert into `jh` (`timu`, `ans`) values('Spring容器支持的配置文件格式有（   ）\nA、XML文件格式\nB、TXT文件格式\nC、HTML文件格式\nD、Properties文件格式\n','A,D\n');
insert into `jh` (`timu`, `ans`) values('下列关于默认拦截器的描述，正确的有（   ）\nA、拦截器栈不能作为默认拦截器\nB、默认拦截器需要使用<default-interceptor-ref>元素\nC、默认拦截器可以对其指定的包中，所有的Action都能起到拦截的作用\nD、每一个package下可以定义多个默认拦截器\n','B,C\n');
insert into `jh` (`timu`, `ans`) values('下列选项中，属于Spring通知类型的是（   ）\nA、前置通知\nB、中置通知\nC、后置通知\nD、环绕通知\n','A,C,D\n');
insert into `jh` (`timu`, `ans`) values('在struts2中想去修改struts2的访问action的扩展名,可以在哪些配置文件中修改？（）\nA、struts.xml\nB、struts.properties\nC、web.xml\nD、struts-config.xml\n','A,B,C\n');
insert into `jh` (`timu`, `ans`) values('下列有关JDK动态代理的描述，正确的有（   ）\nA、JDK动态代理是通过JDK中的java.lang.reflect.Proxy类来实现的\nB、AOP手动使用代理模式有两个典型的例子，分别为JDK动态代理和CGLIB代理\nC、JDK的动态代理依靠接口实现，如果有些类并没有实现接口，则不能使用JDK代理\nD、\nE、使用动态代理的对象不必实现接口\n','A,B,C\n');
insert into `jh` (`timu`, `ans`) values('快照是自动产生的，不可以手工修改。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('自定义的包继承了Struts2的struts-default包，就可以使用默认包中定义的内建拦截器。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('值栈对象的生命周期随着request对象的创建而创建，随着request对象销毁而销毁。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在Struts2中没有预定义结果类型。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('保存在内存中数据的状态是瞬时状态。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在struts2中，直接访问jsp页面，struts2将使用默认拦截器栈处理当前请求。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('struts2中拦截器实现责任链模式。（( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('值栈是struts2中用来存放数据的内存结构。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Spring是以IOC和AOP为内核的框架。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('ActionContext.getContext().getSession().put(key,value); 将数据放置context 固定key为session对应的map中。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('模型驱动要求必须为成员提供getter/setter方法。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('二级缓存只需要导入第三方缓存技术JAR包ehcache-1.5.0.jar即可。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('<class-cache>元素用于指定哪个对象使用二级缓存。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('OgnlContext 对内置了很多常用 web对象的对应Map结构，通过parameters 、request、session、 application、attr 对应map对象，可以间接操作 Servlet API。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Struts2.3.24版本的核心过滤器类是StrutsPrepareAndExecuteFilter。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('不使用注解开发，可以导入struts2-convention-plugin-2.3.14.jar此JAR包。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在关联关系中的反转操作中，inverse只对<set>、<one-to-many>或<many-to-many>标签有效，对<many-to-one>和<one-to-one>无效。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('构造器注入的索引是从1开始。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('模型驱动编写一个成员变量，可以不实例化。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('事务是由一条或多条操作数据库的SQL语句组成的一个不可分割的工作单元。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在applicationContext.xml文件中加载properties文件使用<context>节点。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('struts2的默认拦截器栈，已经包括了fileUpload拦截器。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('当使用HQL检索方式检索数据表中的所有记录时，查询语句中可以省略select关键字。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('自定义拦截器可以实现很多功能，比如权限控制，性能监控。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('struts2默认将request、session、application放入到map中。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate中事务提交前，默认会执行flush()方法。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('struts2的拦截器放置在servlet中也可以使用。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('struts2对request对象进行了增强，不仅可以获取到request域中的数据也可以获取到值栈中的数据。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('多对多级联添加是添加当前对象的同时，将被关联对象也进行添加。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('值栈贯穿Action的整个生命周期。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s:file>标签用于创建一个文件选择框。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Configuration接口是配置hibernate，根据其启动hibernate，创建SessionFactory对象。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('持久状态的数据在关机后数据依然存在。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('除了使用Struts2定义的内建拦截器，我们还可以自定义拦截器。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('valueStack是单例的，用于存放struts2需要存放的数据。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Hibernate映射配置文件必须配置类属性与表字段的映射。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('表单提交数据时，表单元素name属性的值不一定要和Action中属性的名称对应。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Hibernate3提供了属性的延迟加载功能。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('IOC容器的作用把创建对象的任务交给spring容器来做。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在hibernate.cfg.xml 开启二级缓存是\n<property name=\"hibernate.cache.use_second_level_cache\">true</property>。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Query对象的uniqueResut()方法返回结果内容为对象或对象数组。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('HQL：select userName from UserModel可以使用uniqueResut()方法进行查询结果的获取。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('只读型（read-only）数据不允许修改 ，只能查询。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s:iterator>标签的status属性默认值为1。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('如果在<action>元素中指定<interceptor-ref>那么默认defaultStack就不会得到执行。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('拦截器栈是由多个拦截器链或者拦截器栈组成而成。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('持久化可以把对象转换成为字符串的形式通过网络传输，在另一端接受到这个字符串后能把对象还原出来。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Struts2是Struts1的下一代，其设计思想大致相同。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('获取Configuration对象的方式Configuration conf = Configuration.getConfiguration();( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('持久化能把程序保存到文件。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('文件上传时form表单的enctype属性值必须设置为multipart/form-data。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('struts2将值栈保存servlet 的request作用域。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('hibernate事务相关配置通常配置在hibernate.cfg.xml文件中。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('默认情况，在一个action没有配置拦截器的引用，说明当前action将不使用拦截器。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在Struts2的数据标签中，<s:a>标签用于构造HTML页面中的超链接。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('HQL面向对象，而SQL操纵关系数据库。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('属性驱动要求Action属性必须提供getter/setter方法。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('值栈被保存在HttpServletRequest作用域中。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Struts2和Spring进行整合时，Struts2的相关配置可以不配置在applicationContext.xml中。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Struts2标签库主要分为普通标签和UI标签。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('action类可以获取上传文件的文件名称和文件类型。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Struts2和Spring进行整合时，Spring采用单例的方式管理Action。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('”from UserModel um”符合HQL语句格式。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('HQL：select userName from UserModel可以使用list()方法进行查询结果的获取。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Spring与Struts2进行整合时，Bean的作用域通常设置为prototype。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('执行查询时，查询数据封装为对象保存在一级缓存数据区，同时将查询数据快照信息保存到快照区。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('使用构造器实例化方式实例化Bean，则该Bean对应的类中必须有默认的构造函数。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('二级缓存是SessionFactory级别的缓存，同一个SessionFactory开启的不同Session间数据共享。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在struts.xml文件中通过<init-param>元素来配置常量。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('uniqueResut()方法返回结果为对象或对象数组，数据总量为0到1条数据。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('清空一级缓存中的指定数据可以使用clear()方法。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('destory-method指定方法正常执行，必须设置为scope=”singleton”，并且手动调用close()方法。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<result>元素中name属性的默认值为success。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate的映射文件的作用是实体类的属性与数据库表的字段建立一一对应关系。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('一个SessionFactory对象对应多个数据库存储源。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('表单提交数据时，可以通过action的属性驱动，来获取数据。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('必须实现接口ModelDriven，通过在实现接口时，提供javabean类型作为泛型参数。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('关系维护能力可以通过设置inverse选项进行。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate快照区保存了与一级缓存相对应的数据，但是并不是真正的对象。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('二级缓存的数据首先加载到一级缓存中，然后一级缓存将数据返回给应用程序。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('struts2拦截器必须先注册再使用。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Spring各模块之间可以单独存在。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('一个Bean可以具有多个name值。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('持久化能把程序数据从数据库中读出来。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('快照的作用是用于比对一级缓存中的数据是否进行增删改操作。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('package元素的extends属性默认情况下继承struts-default。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('使用Hibernate只做查询操作时，可以不开启事务。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('若execute()方法返回一个SUCCESS常量，则表示执行成功，并返回结果页面。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('模型驱动不能与属性驱动同时存在。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('同一个配置文件中，多个Bean可以使用同一个id值。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('hibernate的QBC分页查询中的setMaxResults表示当前页最多检索几条记录。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('与悲观锁相比，乐观锁（Optimistic Locking）通常认为许多事务同时操作同一个数据的情况很少发生，所以乐观锁不做数据库层次的锁定。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('外置缓存必须引入第三方缓存插件才能使用。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('QBC查询没有HQL查询容易理解。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('D.stream确定result将从action获得流并发送到浏览器。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('获得值栈对象引用 可以通过两种方法：\n第一种 ServletActionContext.getRequest().getAttribute(\"struts.valueStack\");\n第二种 ActionContext.getContext().getValueStack();( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s:checkboxlist/>的list属性，只能添加List集合数据，不能添加Map集合数据。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('通过继承抽象拦截器类AbstractIntercepter可以自定义拦截器。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('struts2是基于MVC模式的,很好的将应用程序进行了分层，使开发者更关注于业务逻辑的实现。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate框架是一个Java持久层框架。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('对象栈可以存放任意Java对象，struts2底层使用List实现栈的效果。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Struts2是Struts1的升级版本。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('struts2的拦截器在intercept()方法中执行invocation.invoke()，表示执行下一个拦截器或目标action方法。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('一级缓存与快照可以根据需求，手工修改快照区的内容。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在Struts2.1版本之前，所使用的核心过滤器类是org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('ActionContext.getContext().put(key,value) 直接对context进行操作。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('UI标签是以丰富而可复用的HTML文件来显示数据。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('配置文件中的init-method属性表示调用的初始化方法。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Spring核心模块的作用是做IOC的，用来管理Bean的。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Struts2和Spring进行整合时， Struts2自身创建Action需要在配置action的class属性使用全类名。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('QBC查询短语中Restrictions.eq表示等比对。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('刷新一级缓存时，执行SQL语句的判定标准为数据区与快照区的数据是否相同。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s:if>、<s:elseif>、<s:else>这三个标签用于程序的分支逻辑控制。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('编写HelloWorldAction类时必须继承ActionSupport类。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('<s:submit>标签可以指定提交时的Action对应的方法。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('HQL语句类似于SQL语句，在HQL语句中也可以使用别名。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('执行flush()方法会发送update语句。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate的映射文件反映了持久化类和数据库表的映射信息。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('文件上传必须要使用<s:file>标签。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('拦截器栈不能作为默认拦截器。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('refresh()方法可以重新查询数据库并更新Hibernate快照区和一级缓存。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在实际开发中，如果是一对多关系，会将一的一方的inverse属性设置为true。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s:reset>标签用来创建一个重置按钮。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Spring和Hibernate整合后可以将hibernate.cfg.xml相关配置放入applicationContext.xml文件中。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在一级缓存常用操作中，调用Session的refresh ()方法时，会执行刷出缓存的操作。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('@Conpoent注解与@Component、@Service、@Controller功能相同。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate版本下载并解压完的目录中，lib/required子目录存放了运行Hibernate3项目必须的JAR包。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('一对多关系中，一方模型中添加多方模型的集合。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('模型驱动要求Action类必须实现ActionSupport类。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('html表单标签的class属性，在struts中需要使用cssClass属性。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('EL表达式不能直接访问值栈中的数据。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('AOP的全称是 Aspect Oriented Programing，即面向切面编程。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate的核心API中，Session 对象是应用程序与数据库之间交互操作的一个单线程对象。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('QBC查询短语中Restrictions.ge表示大于等于比对。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate是一个开放源代码的ORM（Object Relational Mapping，对象关系映射）框架。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('获取Transaction对象的方式Transaction t = s.getTransaction();( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('为Bean的属性注入值可以使用property元素的ref或者value属性完成。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('@Resource默认按照Bean实例名称进行装配。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate中只提供了一个级别的缓存。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('<s:a>标签用于构造HTML页面的超链接。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('可以通过ActionContext.getContext().getValueStack()获得值栈。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('查询缓存依赖于类级别的缓存。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('所谓的拦截器链是指对应各个功能的拦截器按照一定的顺序排列在一起形成的链。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('数据可以由持久状态转换为瞬时状态。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在Spring容器中，<bean>元素中的lazy-init属性用来表示延迟加载。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Struts2预定义的结果类型中，每个<result-type>元素都是一种视图技术或者跳转方式的封装。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('多对多级联删除是删除当前对象的同时，将被关联对象也进行删除。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('拦截器的配置是通过<interceptor>标签进行的。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Struts2核心功能是由拦截器实现的。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Spring属于三层架构的持久层框架。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在解压后的Struts2.3.24的安装目录结构中，apps文件夹用于存放官方提供的Struts2示例程序。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('hibernate.cfg.xml中整合C3P0是<property name=”hibernate.connection.provider_class”>org.hibernate.connection.c3p0ConnectionProvider</property>。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate映射中表中的字段必须与类中的属性一一对应，全部映射。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('事务是由一条或多条操作数据库的SQL语句组成的一个不可分割的工作单元。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate提供的各种检索方式中，SQL是官方推荐的查询语言。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Hibernate是一个“对象关系映射”的实现。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('QBC查询短语中Restrictions.between表示范围比对。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s:checkbox>标签用于创建单选框。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('<include>元素用来在一个struts.xml配置文件中包含其他的配置文件。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('struts2默认拦截器栈名称是：defaultStack。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('singleton为单例模式。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('HQL查询的数据进入二级缓存。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Spring的事务管理分为两种方式，分别为声明式事务管理和编程式事务管理。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s:optgroup>标签用来生成选项组。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('悲观锁是数据库内部锁机制。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate的懒加载使用的是get()方法。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('HQL与SQL没什么差别。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在Spring容器中的<bean>元素上设置属性default-lazy-init=\"true\"，可以控制所有Bean的延迟加载。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Struts2在有请求到达的时候为每个请求创建一个新的值栈。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('属性驱动要求Action属性类型必须为String类型。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Action接口中定义了NONE常量。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('事务的隔离级别越高，越能保证数据库的完整性和一致性，但并发时越高的级别对性能的影响也越大。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('拦截器等同于过滤器。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('环绕通知在目标方法执行前后实施增强。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('异常抛出通知在方法抛出异常前实施增强。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Struts2的表单标签中，<s:textfield>标签用于创建多行文本框。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在Struts2中，在 request域中存放数据只能通过ActionContext进行设置。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('文件上传是指将本地文件上传到服务器的指定目录下。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在hibernate.cfg.xml文件中配置数据库方言是<property name=”hibernate.dialect”>\norg.hibernate.dialect.MySQLDialect</property>。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<result>元素中的name属性是必选属性。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('导入struts2标签库的方式为<%@ taglib prefix=”s” uri=”/struts-tags”>。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('值栈可以看作是对应每一个请求对象的轻量级的内存数据中心。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('redirect，将请求重定向到另一个资源，一般重定向到jsp页面。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('hibernate3.jar是hibernate的核心类库。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('多对多关系中，双方模型中添加对应模型的对象。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('<s:elseif>、<s:else>不能单独使用，都必须与<s:if>标签结合使用。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Spring为我们提供了两种IoC容器，分别为BeanFactory和ApplicationContext。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate实体对象制作规范包含为所有属性提供getter与setter方法。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('自定义拦截器放行方法，执行的是ActionInvacation的invoke()方法。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('拦截器的配置是在struts.xml文件中完成的。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Struts2的表单标签中，用于创建单行文本框的是【】标签。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('一个Bean可以具有多个id值。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('每个<bean>元素中的id属性值在Spring容器中是唯一的。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('IoC容器中的对象可以为多例模式。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('@Autowire 注解可以用在字段上也可以用在set方法上。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Action控制类中execute()方法的权限修饰符为public。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('execute()方法是Action类的默认请求处理方法。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('乐观锁与数据库锁无关。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s:checkbox>标签的fieldValue属性指定真实的value值，会被value属性值屏蔽。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('拦截器在一个Action执行前后都可以进行拦截。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('一个事务操作数据时，为数据加锁，另一个事务则进行无法操作。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('脏读是指一个事务读取到另一个事务已提交的数据。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('<s:debug>标签只有一个id属性，且一般不使用。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('”from UserModel where uuid = ?”符合HQL语句格式。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('JDBCTemplate类作为Spring对JDBC支持的核心，提供了所有对数据库操作功能的支持。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('“from UserModel where um.uuid = :uuid”符合HQL语句格式。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('required子目录是运行Hibernate项目必须的JAR包。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('struts2的<s:if>和<s:elseif>标签中，可以不指定test属性。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('悲观锁解决丢失更新，但效率低，数据不能同时修改。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s:checkboxlist>标签用于产生一组<input type=“checkbox”/>标签。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('获取Session对象的方式Session s = sf.getSession();( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('使用Hibernate可以简化持久化层的编码。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('二级缓存默认开启，无需手工设置。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Spring框架可以和Struts2和Hibernate框架进行整合。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('OID检索方式主要使用get()和load()方法进行加载记录。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('singleton作用域是Spring容器默认的作用域。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('package元素的常用属性中，namespace属性是必选属性。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Spring的核心模块是必须的，其他模块是基于核心模块。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('HQL语句中可以使用别名，别名使用关键字as指定。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('OGNL支持静态方法调用获取值。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('applicationContext.xml主要是配置各种Bean以及声明式事务。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('struts2的标签只能使用s前缀。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Session是线程安全的。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Struts2的核心配置文件是struts.xml。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('struts2内部使用了很多内置拦截器，用于在Action执行前后加入某些操作。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('struts2定义好的拦截器配置在struts-default.xml文件中。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('hibernate的QBC分页查询中的setFirstResult默认值是0。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Spring容器默认的作用域是prototype作用域。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('配置默认拦截器需要使用<default-interceptor-ref>元素。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s:debug>标签是用于调试程序时输出的相关信息。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s:iterator>标签的step属性默认值为0。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('<s:iterator>标签主要用于对集合中的数据进行迭代。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在web.xml文件中，filter标签中配置的是该过滤器的映射。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在使用<s:form>标签时，一般会包含其它的表单元素。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('模型驱动需要实现接口的方法是getModel()。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Struts2的表单标签中，<s:select>标签用于创建一个下拉列表框。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('依赖注入的作用是在使用Spring框架创建对象时，动态的将其所依赖的对象注入到Bean组件中。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate的缓存中，一级缓存为Hibernate的内置缓存，不能被卸载。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate对日志的功能提供了实现。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('hibernate的HQL分页查询中的setMaxResults表示检索的总记录数。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('hibernate的HQL分页查询中的setFirstResult默认值是1。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('如果在Bean中未指定id和name，则Spring会将class属性的值当作id使用。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('JDK动态代理是通过JDK中的 java.lang.reflect.Proxy 类来实现的。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('多对多关系中，双方都使用many-to-many描述关系。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('拦截器在一个Action执行前才有拦截作用。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Hibernate快照的作用就是确保一级缓存中的数据和数据库中的数据一致。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Query对象的list()方法返回结果数据总量为1到多条数据。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('saveOrUpdate操作根据对象是否具有OID判断执行save操作还是update操作。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('delete操作只能对脱管态对象与持久态对象进行操作。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Spring对服务器端三层体系架构的每一层都提供了技术支持。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('多对多关系中，关系的配置必须同时存在，不能仅配置一个SET。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在HQL与SQL中，都包含select，insert，update，delete语句。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate的hibernate.cfg.xml配置文件中可以对事务进行配置。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('dispatcher，struts框架默认结果类型，将请求转发到另一个资源。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('模型驱动方式通过JavaBean模型进行数据传递。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s:password>标签用于创建一个密码输入框。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Struts2的核心配置文件是struts2.xml。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('IoC是控制反转。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在Spring和Hibernate整合使用Session对象进行CURD操作。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('一个类可以映射多个表，一个表可以映射多个类。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s:select>标签中，headerKey和headerValue属性需要同时使用。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('使用动态代理的对象不需要实现接口。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('一对多关系中，一方配置set，使用one-to-many描述关系。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('evict()方法用于清除一级缓存中的某个数据。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('如果在多个文件中配置了同一个Struts2常量，则后一个文件中配置的常量值会覆盖前面文件配置的常量值。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('自定义拦截器的声明必须配置在<package>中。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('属性驱动要求表单字段的名称必须与Action属性名相同。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s:radio>标签用于创建单选按钮。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Struts2提供了对文件上传和下载功能的支持。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('本地事务是指针对一个数据库操作。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Struts2是以WebWork为核心的，它采用拦截器的机制来处理用户的请求。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate映射配置文件必须配置主键的映射关系。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('当多个事务同时访问数据库中的相同数据时，如果没有采取必要的隔离措施，将会导致各种事务并发问题，这时可以采用悲观锁或乐观锁对其进行控制。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在struts2中可以利用ognl表达式展现数据。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('很少被修改，不是很重要，允许偶尔的并发问题，适合放入二级缓存。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('hibernate的HQL分页查询中的setMaxResults表示当前页最多检索几条记录。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('ActionContext对象使用getActionContext()即可获取。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('<s:form>标签用来呈现HTML语言中的表单元素。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('如果<package name=”a”>中设置了一个自定义拦截器in，在<pacage name=”b” extends=”a”>，那么b包中是不能使用自定义拦截器in的。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('开启动态方法调用是<constant name=\"struts.enable.DynamicMethodInvocation\" value=\"false\" />。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在实际开发中，如果是一对多关系，则任意设置一方来维护关联关系即可。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Spring各模块之间是紧密联系的，相互依赖的。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在进行Hibernate下载时，hibernate-distribution-3.6.10.Final-dist.tar.gz文件是Windows环境下使用的版本。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Spring框架默认的核心配置文件名为applicationContext.xml。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('struts2标签比JSTL更加易用和强大。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('获取SessionFactory对象的方式SessionFactory sf = conf.getSessionFactory();( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('BeanFactory就是一个管理Bean的工程，它主要负责初始化各种Bean。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Query对象的uniqueResut()方法返回结果数据总量为0到1条数据。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('JdbcTemplate类中有多个重载的update()方法。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('文件上传必须是post请求方式。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('关联关系必须配置成双向的，不能只配置一边。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在使用模型驱动时，Action类必须实现ModelDriven接口，并且要重写getModel()方法。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('查询数据库时，添加悲观锁select * from table for update;。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('包含配置在struts.xml文件中设置<include file=””/>即可实现。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('如果在配置文件中没有对拦截器进行配置，默认执行默认的拦截器栈。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在struts2标签内部中能使用EL表达式。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Spring和Hibernate整合需要添加spring-orm-3.2.2.RELEASE.jar。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('QBC查询符合Java程序员的编程习惯。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('值栈中包含两个部分，一个CompoundRoot 和 一个OgnlContext,CompoundRoot是一个ArrayList 结构， OgnlContext 是一个Map 结构。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('IoC容器中管理的Bean默认为单例模式。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('xwork-core-2.3.24.jar是Struts2的核心类库JAR包。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('SessionFactory接口是负责保存、更新、删除、加载和查询对象，是线程不安全的，避免多个线程共享一个session，是轻量级、一级缓存。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Spring容器的XML配置文件中，每一个<bean>子元素定义了一个Bean。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('瞬时态和脱管态的对象不在session的管理范围，所以会在一段时间后被JVM回收。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Struts2标签库被定义在struts-tags.tld文件中。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('prototype原型模式表示每一次都会创建一个新的Bean实例。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate映射配置文件必须配置类与表的映射关系。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('将数据转换为持久状态的机制称为数据持久化。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在jsp页面，可以使用<s:property/> 获得栈顶的数据。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('UI标签支持Ajax技术操作。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s:password>标签可以生成HTML中的<input type=”password”/>标签，常用于在登录表单中输入用户的登录密码。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate实体对象制作规范不包含为声明为最终类(final修饰)。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate中，用户可以显式地设定锁模式。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Spring事务管理的核心接口中，PlatformTransactionManager接口是事务的状态，描述了某一时间点上事务的状态信息。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('AOP专业术语中，Target是指代理的目标对象。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('通常情况下先执行Action后执行拦截器。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Spring和Hibernate整合后不可以替换hibernate.cfg.xml配置文件。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('通过为瞬时态对象设置持久化标识OID，可以直接将瞬时态转换为脱管态。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('一级缓存是Session级别的缓存，不同Session对象间数据不共享。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('开发Struts2项目时，需要在web.xml配置文件中手动配置Struts2的核心过滤器。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('一项事务（Transaction）只是由一条操作数据库的SQL语句组成的。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Spring的事务管理是基于AOP实现的。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('通知是对目标切入点增强的内容。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('孤子删除是断开具有关联关系的对象关系时，被关联对象被删除。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在Spring和Struts2整合时，需要导入struts2-spring-plugin.2.3.24.jar。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('OGNL的上下文环境Context是一个List类型的对象。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('事务型（Transactional）提供Repeatable Read事务隔离级别 ，缓存支持事务，发生异常的时候，缓存也能够回滚。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('可以通过ActionContext.getValueStack()获得值栈。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在Struts2中，不支持使用EL表达式直接访问值栈中的数据。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在使用Hibernate开发时，为了防止漏包，最好将lib下所有的jar导入到项目中。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('hibernate.cfg.xml配置文件反映了持久化类和数据库表的映射信息。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Struts2是一个基于MVC模式的框架。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('AOP专业术语中， 切面是指要对哪些Joinpoint进行拦截。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Hibernate实体对象制作规范不包含提供用于作为OID的标识属性。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('struts.xml文件可以放入任意目录进行加载。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('模型驱动要求Action类必须实现ModelDriven接口。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<result>元素中type属性的默认值是dispatcher。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s:submit>标签主要用于产生HTML中的清除按钮。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('ApplicationContext是BeanFactory的子接口，也被称为应用上下文。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('TransactionDefinition接口是事务定义对象，提供事务相关信息获取的方法。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('ActionContext.getContext().put(key,value) 直接对context进行操作。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate的二级缓存功能是通过配置二级缓存的插件来实现的。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('使用<s:property value=\"#key\"/>获得context中指定key的内容。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('OGNL表达式需要配合Struts2标签才可以使用。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('文件上传form 表单enctype属性为multipart/form-data。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('@Autowire 注解默认按照类型进行装配。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('使用IoC可以完成为一个方法进行功能增强。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('乐观锁不做数据库层次的锁定，而是基于数据版本（Version）标识实现应用程序级别上的锁定机制。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('每次请求Action，Action对象本身都会 被push到值栈的root 中。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('拦截器链组成的集合是拦截器栈。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('设置inverse=”true”表示具有关系维护能力。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('QBC查询短语中Restrictions.le表示小于等于比对。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('值栈对象的内部有两个逻辑部分：对象栈和Map栈。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('hibernate的二级缓存中类级别缓存中存放的是对象实体的散装数据，查询时会重新组织新的实体对象。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<result>标签定义了处理结果和视图资源之间的映射关系。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Struts2数据标签中的<s:param>标签不能与其它标签合起来使用。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('struts2有着丰富的taglib,如能灵活运用，则能大大提高开发效率。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<bean>元素的scope属性如果不设置，Spring容器中只会存在一个共享的Bean实例。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('include元素将其他配置文件包含到struts.xml文件。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('hibernate事务相关配置通常配置在hibernate.cfg.xml文件中。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Struts2和Spring进行整合时，Action的创建时交给Spring进行管理的。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('一个类可以被定义成多个Bean。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('ActionContext.getContext().getApplication().put(key,value); 将数据放置context固定key为application对应的map中。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('文件下载是将文件从本地机器上放到服务器上。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('一对多关系中，多方使用many-to-one描述关系。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('OGNL中，Root对象所在环境就是OGNL的上下文环境（Context）。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('注入的方式有两种，分别是构造器注入与setter注入。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Session执行完数据库操作后，要使用Transaction接口的commit()方法进行事务提交，才能真正的将数据操作同步到数据库中。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate实体对象制作规范不包含声明无参公共的构造方法。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在配置Struts2环境时，添加log4j.properties文件是为了打印日志信息。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('clear()方法是清空一级缓存中所有的数据。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('二级缓存数据加载load与get查询的数据进入二级缓存。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('save操作用于将瞬时态对象转化为持久态对象。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s:hidden>标签在页面上没有任何显示，可以保存或交换数据。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('自定义拦截器需要实现Interceptor接口。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('持久性指数据永久保存在数据库中。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('struts表单标签默认使用的主题是xhtml。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('一级缓存的常见操作分别为【】、【】和【】。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('HQL动态实例查询，能够将查询结果封装到一个对象当中。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('对于每个数据库事务，应该创建一个SessionFactory对象。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('乐观锁是在数据表中为数据添加版本字段，每次数据修改都会导致版本号+1。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('一个持久化类的实例可以同时处于三种不同状态中的两种。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在Struts2中，Action和Servlet API耦合度很高，所以在Action中调用Servlet API很方便。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('每一个package下只能定义一个默认拦截器。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('读未提交隔离级别可有效的防止不可重复读和脏读。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('setter可以为Bean注入String类型的属性值，但是不能注入基本数据类型的值。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('<s:iterator>标签可以用于根据条件遍历集合中的数据。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在Spring容器中，<bean>元素中的lazy-init属性的默认值为true。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Hibernate是JDBC的替代技术。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Struts2和Struts1相同都是基于MVC模式的轻量级Web框架。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在实际项目开发中，通常都使用属性setter注入的方式进行依赖注入。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Query对象的list()方法返回结果为List集合。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('可以通过设置来改变Struts的默认主题。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在配置action元素时，如果没有指定class属性值，则其默认值为com.opensymphony.xwork2.ActionSupport类。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Action类实现ServletRequestAware就可以直接访问Web应用的HttpServletRequest实例。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('redirect结果类型用来重定向到指定的结果资源，该资源只能是JSP文件，不可以是Action类。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('一般情况下，一个项目中只需要一个SessionFactory。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('@Autowire注解默认按照名称进行装配。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('多对多关系中，双方模型中添加对应模型的集合。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('级联添加是添加当前对象的同时，将被关联对象也进行添加。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('当事务中的所有操作都正常完成时，整个事务才能被提交到数据库中，如果有一项操作没有完成，则整个事务会被回滚。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('HQL仅用于查询和删除数据，不支持insert，update语句。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('QBC查询通过面向对象化的设计将数据查询条件封装成一个对象。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('事务的隔离性是指不同的事务之间互不干扰。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('构造器实例化是指Spring容器通过Bean对应的类中默认的构造函数来实例化Bean。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('查询部分记录可使用动态实例查询方式。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('可以使用ActionContext.getContext().put方法把一个对象放入到map中。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('构造器实例化需要提供对应类的默认构造函数来实例化Bean。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Struts2安装完成后lib目录存放着Struts2的核心类库，以及Struts2的第三方插件类库。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate版本下载并解压完的目录中，documentation文件夹用于存放Hibernate的相关文档，包括参考文档的API文档。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Struts2.3.24版本的核心过滤器类是StrutsPrepareAndExecuteFilter。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('ehcache.xml是设置二级缓存的相关参数。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Action是线程安全的。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('使用Struts2数据标签中的<s:debug>标签后，网页中会生成一个[Debug]的链接。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate是一种数据持久化技术。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('OGNL的全称是对象图导航语言（Object-Graph Navigation Language）。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate的核心API中，Session接口主要用于管理事务。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('OGNL可以存取任意对象属性。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('redirect结果类型用来重定向到指定的结果资源，该资源可以是JSP文件，也可以是Action类。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('实现SessionAware接口可以得到HttpSession实例。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('fileUpload拦截器实现了文件上传的功能。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('QBC查询可读性强。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在Spring中使用bean元素的scope属性定义Bean的作用域。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('hibernate事务隔离级别设置为2，表示读操作未提交。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('AOP手动使用代理模式有两个典型的例子，分别为JDK动态代理和CGLIB代理。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('集合缓存要依赖于类级别的缓存，因为这里存放的是OID。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('全局事务是由服务器进行管理的事务。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('hibernate的二级缓存中类级别的缓存存放的是对象的实体。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('@Controller通常标注在业务层。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('为Bean的属性注入引用类型的对象必须使用property元素的value属性完成。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('<s:hidden>标签用于创建隐藏表单元素。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('访问每个Action默认都会执行defaultStack中所有拦截器。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('update操作用于将脱管态对象转化为持久态对象。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('hibernate-distribution-3.6.10.Final-dist.tar.gz是Windows下的版本。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('根对象（Root）可以理解为OGNL的操作对象。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('将Hibernate交给Spring管理，将所有的Hibernate配置文件全部写到Spring配置文件中。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('使用Struts2的Web项目通常都需要利用到Struts2的全部JAR包。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('一对多关系中，可以只配置一方对多方的关系，而不配置多方对一方的关系。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s;password/>默认情况可以显示密码信息。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('导航对象图检索方式是根据已经加载的对象，导航到其他对象。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate的核心API中，Query代表面向对象的一个Hibernate查询操作。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('使用prototype定义的bean在Spring容器中将只有一个实例。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('valueStack.push(obj) 将指定的对象压入到栈顶。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('文件上传form表单enctype属性值采用默认即可。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('SessionFactory是重量级的对象，不应该随意创建。如果系统中只有一个数据库存储源，只需要创建一个。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('基于XML的声明式AspectJ，所有的切面和通知都必须定义在<aop:config>元素内。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Spring就是一个大工厂，可以将所有对象创建和依赖关系维护，交给Spring管理。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Hibernate映射中类中的属性必须与表中的字段一一对应，全部映射。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('多对多不能在映射文件中同时设置inverse=”true”。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s:if>标签可以单独使用，而<s:elseif>、<s:else>都必须与<s:if>标签结合使用。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('struts2的拦截器只能在struts.txt配置文件中注册。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('访问Context中的对象使用“#”获取。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('使用Hibernate框架是为Java应用提供了一个易用的、高效率的表现层框架。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在多个事务同时使用相同的数据时，可能会发生并发的问题。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('一对多关系中，多方模型中添加一方模型的对象。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('<s:checkbox>标签的value属性值是一个“假值”，用来表示复选框是否被选中。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('struts2的拦截器可以继承AbstractInterceptor类。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('redirectAction，将请求重定向到另一个action。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('注解的方式不能整合三大框架。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('属性驱动要求Action必须继承ActionSupport类。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在Struts2 内置的主题中，simple为默认主题。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('list()方法返回结果为List对象，数据总量为0到多条。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('在struts.xml文件中，package元素用于定义包配置。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('清楚一级缓存指定的数据可以使用clear()方法。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在Spring容器中，通过lazy-init属性设置Bean延迟加载，对多实例的情况同样有效。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Spring是一个轻量级的开源框架。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('快照是二级缓存中的特殊区域。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('hibernate的QBC分页查询中的setMaxResults表示检索的总记录数。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('Hibernate的事务默认是开启的。( )\n','错\n');
insert into `jh` (`timu`, `ans`) values('在action必须提供3个属性才能完成整个上传过程。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('Struts2的所有表单标签对应的类都继承自UIBean类。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('如果需要开发自己的拦截器类，就需要直接或间接的实现Interceptor接口。( )\n','对\n');
insert into `jh` (`timu`, `ans`) values('循环的struts2标签是【】。\n','【<s:iterator>】\n');
insert into `jh` (`timu`, `ans`) values('在配置包时，必须指定【】属性，通过该属性来唯一标识包。\n','【name】\n');
insert into `jh` (`timu`, `ans`) values('struts2 的拦截器使用了【】设计模式\n','【责任链模式】\n');
insert into `jh` (`timu`, `ans`) values('Struts2.3.24版本的核心过滤器类是【】。\n','【StrutsPrepareAndExecuteFilter】\n');
insert into `jh` (`timu`, `ans`) values('在web.xml文件中，【】标签中配置的是该过滤器的映射。\n','【filter-mapping】\n');
insert into `jh` (`timu`, `ans`) values('Hibernate持久化对象状态可以转换，当对瞬时态对象执行Session的save()或saveOrUpdate()方法后，该对象将被放入Session的一级缓存，对象进入【】态。\n','【持久】\n');
insert into `jh` (`timu`, `ans`) values('在Struts2.1版本之前，所使用的核心过滤器类是org.apache.struts2.dispatcher.【】类。\n','【FilterDispatcher】\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate中，二级缓存可分为四类，分别是类级别的缓存、集合级别的缓存、【】和更新时间戳。\n','【查询缓存】\n');
insert into `jh` (`timu`, `ans`) values('要使用自动装配，就需要配置<bean>元素的【】属性。\n','【autowire】\n');
insert into `jh` (`timu`, `ans`) values('OGNL结构的三要素分别是【】、【】和【】。\n','【表达式】【根对象】【上下文环境】\n');
insert into `jh` (`timu`, `ans`) values('配置Struts2的核心过滤器名为org.apache.struts2.dispatcher.ng.filter.【】。\n','【StrutsPrepareAndExecuteFilter】\n');
insert into `jh` (`timu`, `ans`) values('Spring 3为Bean实例定义了五种Bean的作用域，分别是singleton、【】、request、session和global Session。\n','【prototype】\n');
insert into `jh` (`timu`, `ans`) values('在解压后的Struts2.3.24的安装目录结构中，用于存放官方提供的Struts2示例程序的是【】文件夹。\n','【apps】\n');
insert into `jh` (`timu`, `ans`) values('在一级缓存常用操作中，调用Session的【】方法时，会执行刷出缓存的操作。\n','【flush()】\n');
insert into `jh` (`timu`, `ans`) values('在struts.xml文件中通过【】元素来配置常量。\n','【<constant>】\n');
insert into `jh` (`timu`, `ans`) values('Spring的事务管理分为两种方式，分别为声明式事务管理和【】事务管理。\n','【编程式】\n');
insert into `jh` (`timu`, `ans`) values('Spring3中定义的一系列的注解中，通常作用在控制层，用于将控制层的类标识为Spring中的Bean的是【】注解。\n','【@Constroller】\n');
insert into `jh` (`timu`, `ans`) values('数据库中多表之间存在着三种关系，分别是多对多、一对多和【】关系。\n','【一对一】\n');
insert into `jh` (`timu`, `ans`) values('Spring为我们提供了两种IoC容器，分别为【】和ApplicationContext。\n','【BeanFactory】\n');
insert into `jh` (`timu`, `ans`) values('Struts2的表单标签中，主要用于产生HTML中的提交按钮的是【】标签。\n','【<s:submit>】\n');
insert into `jh` (`timu`, `ans`) values('struts2标签库主要分为【】和【】两大类。\n','【普通标签】【UI标签】\n');
insert into `jh` (`timu`, `ans`) values('在Spring中，实例化Bean有三种方式，分别为【】、静态工厂方式实例化和实例工厂方式实例化。\n','【构造器实例化】\n');
insert into `jh` (`timu`, `ans`) values('Spring框架提出了【】类作为数据库访问类。\n','【JdbcTemplate】\n');
insert into `jh` (`timu`, `ans`) values('在Struts2的数据标签中，用于在调试程序时输出更多的调试信息的是【】标签。\n','【<s:debug>】\n');
insert into `jh` (`timu`, `ans`) values('<result>元素中的【】属性用于指定返回的视图资源的类型，其默认值是dispatcher。\n','【type】\n');
insert into `jh` (`timu`, `ans`) values('Spring事务管理的核心接口中，表示事务定义对象的是【】接口。\n','【TransactionDefinition】\n');
insert into `jh` (`timu`, `ans`) values('HQL语句中可以使用别名，别名使用关键字【】指定。\n','【as】\n');
insert into `jh` (`timu`, `ans`) values('显示文本域的struts2标签是【】。\n','【<s:textarea>】\n');
insert into `jh` (`timu`, `ans`) values('事务管理的3个核心接口包括PlatformTransactionManager、【】和TransactionStatus。\n','【TransactionDefinition】\n');
insert into `jh` (`timu`, `ans`) values('开发Struts2项目时，需要在【】配置文件中手动配置Struts2的核心过滤器。\n','【web.xml】\n');
insert into `jh` (`timu`, `ans`) values('在Struts2 内置的主题中，【】为默认主题。\n','【xhtml】\n');
insert into `jh` (`timu`, `ans`) values('Struts2的表单标签中，用来呈现HTML语言中的表单元素的是【】标签。\n','【<s:form>】\n');
insert into `jh` (`timu`, `ans`) values('Struts2的表单标签中，用于一次性创建多个复选框的是【】标签。\n','【<s:checkboxlist>】\n');
insert into `jh` (`timu`, `ans`) values('<s:textfield>标签的作用是【】。\n','【获取前台文本的值】\n');
insert into `jh` (`timu`, `ans`) values('模型驱动实现【】接口来接受请求参数。\n','【ModelDriven】\n');
insert into `jh` (`timu`, `ans`) values('拦截器的配置是在【】配置文件中完成的。\n','【struts.xml】\n');
insert into `jh` (`timu`, `ans`) values('为瞬时态对象设置持久化标识OID，可以将瞬时态转换为【】态。\n','【脱管】\n');
insert into `jh` (`timu`, `ans`) values('在Spring容器中，<bean>元素中的【】属性用来表示延迟加载。\n','【lazy-init】\n');
insert into `jh` (`timu`, `ans`) values('通过继承抽象拦截器类【】可以自定义拦截器。\n','【AbstractIntercepter】\n');
insert into `jh` (`timu`, `ans`) values('Struts2框架是在Struts1和【】框架的基础上进行合并后而产生的。\n','【WebWork】\n');
insert into `jh` (`timu`, `ans`) values('Spring的框架是一个【】容器，以【】模式作为核心。\n','【轻量级】【IOC】\n');
insert into `jh` (`timu`, `ans`) values('拦截器链组成的集合是【】。\n','【拦截器栈】\n');
insert into `jh` (`timu`, `ans`) values('Struts2数据标签中的【】标签用于在当前页面中包含另一个页面。\n','【<s:include>】\n');
insert into `jh` (`timu`, `ans`) values('使用Struts2数据标签中的【】标签后，网页中会生成一个[Debug]的链接。\n','【<s:debug>】\n');
insert into `jh` (`timu`, `ans`) values('在JSP文件使用taglib指令导入Struts2标签库时，Struts2标签库建议prefix属性使用【】作为前缀。\n','【“s”】\n');
insert into `jh` (`timu`, `ans`) values('<action>元素中，用于指定请求Action时所调用的方法的属性是【】属性。\n','【method】\n');
insert into `jh` (`timu`, `ans`) values('在Struts2的数据标签中，用于输出指定值的是【】标签。\n','【<s:property>】\n');
insert into `jh` (`timu`, `ans`) values('使用【】定义的bean在Spring容器中将只有一个实例。\n','【singleton】\n');
insert into `jh` (`timu`, `ans`) values('Struts2的表单标签中，【】标签用于创建一个下拉列表框。\n','【<s:select>】\n');
insert into `jh` (`timu`, `ans`) values('JdbcTemplate类中可以完成插入、更新和删除操作的方法是【】。\n','【update()】\n');
insert into `jh` (`timu`, `ans`) values('在映射文件中通过对【】属性的设置来控制是否对关联对象采用级联操作。\n','【cascade】\n');
insert into `jh` (`timu`, `ans`) values('QBC检索是使用【】对象编写查询条件的。\n','【Restrictions】\n');
insert into `jh` (`timu`, `ans`) values('在配置action元素时，如果没有指定method属性值，则其默认为【】方法。\n','【execute()】\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate提供的各种检索方式中，【】是官方推荐的查询语言。\n','【HQL】\n');
insert into `jh` (`timu`, `ans`) values('Struts2的表单标签中，【】标签用于创建隐藏表单元素。\n','【<s:hidden>】\n');
insert into `jh` (`timu`, `ans`) values('<s:iterator>标签的属性中，由于表示的迭代过程中的状态的是【】属性。\n','【status】\n');
insert into `jh` (`timu`, `ans`) values('Spring容器支持两种格式的配置文件，分别为【】文件格式和XML文件格式。\n','【Properties】\n');
insert into `jh` (`timu`, `ans`) values('Struts2预定义结果类型中默认的是【】结果类型。\n','【dispatcher】\n');
insert into `jh` (`timu`, `ans`) values('如果在Bean中未指定id和name，则Spring会将【】属性的值当作id使用。\n','【class】\n');
insert into `jh` (`timu`, `ans`) values('事务的4大隔离级别分别是读未提交、读已提交、可重复读取和【】。\n','【序列化】\n');
insert into `jh` (`timu`, `ans`) values('对象（实体的实例）对一个特定的Session来说，要么是一个【】对象，要么是【】对象。\n','【瞬时】【持久】\n');
insert into `jh` (`timu`, `ans`) values('、Spring3中定义的一系列的注解中，用于将数据访问层的类标识为Spring中的Bean的是【】注解。\n','【@Repository】\n');
insert into `jh` (`timu`, `ans`) values('输出值的struts2标签是【】。\n','【<s:property>】\n');
insert into `jh` (`timu`, `ans`) values('Spring容器默认的作用域是【】作用域。\n','【singleton】\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate中，用户可以显式显示地设定锁模式，分别有LockMode.UPGRADE和LockMode.【】这两种模式。\n','【UPGRADE_NOWAIT】\n');
insert into `jh` (`timu`, `ans`) values('<s:checkboxlist>标签的作用是【】。\n','【用于一次性创建多个复选框】\n');
insert into `jh` (`timu`, `ans`) values('Struts2的页面请求数据和Action有基本对应方式分别为【】和【】。\n','【字段驱动（属性驱动）】【模型驱动】\n');
insert into `jh` (`timu`, `ans`) values('基于XML的声明式AspectJ，所有的切面和通知都必须定义在【】元素内。\n','【<aop:config>】\n');
insert into `jh` (`timu`, `ans`) values('依赖注入存在三种实现方式，分别是setter方法注入、【】注入和接口注入。\n','【构造方法】\n');
insert into `jh` (`timu`, `ans`) values('Struts2的表单标签中，【】标签用于生成HTML中的<select>标签。\n','【<s:select>】\n');
insert into `jh` (`timu`, `ans`) values('在struts.xml文件中，【】元素用于定义包配置。\n','【package】\n');
insert into `jh` (`timu`, `ans`) values('Spring3中定义的一系列的注解中，通常作用在业务层，用于将业务层的类标识为Spring中的Bean的是【】注解。\n','【@Service】\n');
insert into `jh` (`timu`, `ans`) values('Struts2的表单标签中，【】标签用于创建一个文件选择框。\n','【<s:file>】\n');
insert into `jh` (`timu`, `ans`) values('使用Struts2.3.24版本的项目所依赖的基础JAR包共【】个。\n','【13】\n');
insert into `jh` (`timu`, `ans`) values('Spring容器的XML配置文件的根元素是【】。\n','【<beans>】\n');
insert into `jh` (`timu`, `ans`) values('Struts2的表单标签中，用于创建单选按钮的是【】标签。\n','【<s:radio>】\n');
insert into `jh` (`timu`, `ans`) values('若execute()方法返回一个【】常量，则表示执行成功，并返回结果页面。\n','【SUCCESS】\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate中对事务进行配置是通过【】标签元素中进行的。\n','【<session-factory>】\n');
insert into `jh` (`timu`, `ans`) values('Restrictions类的静态方法中，【】用于表示小于等于<=。\n','【Restrictions.le】\n');
insert into `jh` (`timu`, `ans`) values('<s:checkbox>标签的【】属性值是一个“假值”，用来表示复选框是否被选中。\n','【value】\n');
insert into `jh` (`timu`, `ans`) values('Struts2的表单标签中，用于创建一个密码输入框的是【】标签。\n','【<s:password>】\n');
insert into `jh` (`timu`, `ans`) values('OGNL上下文其实就是一个【】类型的容器。\n','【Map】\n');
insert into `jh` (`timu`, `ans`) values('AOP手动使用代理模式有两个典型的例子，分别为【】和CGLIB代理。\n','【JDK动态代理】\n');
insert into `jh` (`timu`, `ans`) values('<s:iterator>标签的status属性默认值为【】。\n','【false】\n');
insert into `jh` (`timu`, `ans`) values('在一级缓存常用操作中，调用Session的【】方法时，可以重新查询数据库，更新Hibernate快照区和一级缓存。\n','【refresh()】\n');
insert into `jh` (`timu`, `ans`) values('Spring是以IoC和【】为内核。\n','【AOP】\n');
insert into `jh` (`timu`, `ans`) values('Struts2的表单标签中，用于用于创建复选框的是【】标签。\n','【<s:checkbox>】\n');
insert into `jh` (`timu`, `ans`) values('关联关系中的反转操作中，在映射文件中通过对集合的【】属性的设置，来控制关联关系和对象的级联关系。\n','【inverse】\n');
insert into `jh` (`timu`, `ans`) values('OGNL的全称是【】。\n','【对象图导航语言（Object-Graph Navigation Language）】\n');
insert into `jh` (`timu`, `ans`) values('Struts2的表单标签中，【】标签用来创建一个重置按钮。\n','【<s:reset>】\n');
insert into `jh` (`timu`, `ans`) values('OGNL结构的三个要素，分别是表达式（Expression）、【】和上下文环境（Context）。\n','【根对象（Root Object）】\n');
insert into `jh` (`timu`, `ans`) values('Spring3中定义的一系列的注解中，【】用于对Bean的属性变量、属性的Set方法及构造函数进行标注，配合对应的注解处理器完成Bean的自动配置工作。\n','【@Autowired】\n');
insert into `jh` (`timu`, `ans`) values('拦截器的配置是通过【】标签进行的。\n','【<interceptor>】\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate的核心API中，【】 对象是应用程序与数据库之间交互操作的一个单线程对象。\n','【Session】\n');
insert into `jh` (`timu`, `ans`) values('AOP专业术语中，【】是指代理的目标对象。\n','【Target】\n');
insert into `jh` (`timu`, `ans`) values('Struts2数据标签中的【】标签主要用来为其它标签提供参数。\n','【<s:param>】\n');
insert into `jh` (`timu`, `ans`) values('如果需要开发自己的拦截器类，就需要直接或间接的实现【】接口。\n','【Interceptor】\n');
insert into `jh` (`timu`, `ans`) values('文件上传时表单的method属性必须设置成【】提交方式。\n','【post】\n');
insert into `jh` (`timu`, `ans`) values('在struts2-core-2.3.24.jar文件中的【】文件里，为Struts2的所有常量都指定了默认值。\n','【default.properties】\n');
insert into `jh` (`timu`, `ans`) values('Spring通知类型分为前置通知、后置通知、【】、异常抛出通知和引介通知共5种。\n','【环绕通知】\n');
insert into `jh` (`timu`, `ans`) values('Spring依赖注入有两种方式，分别是【】和构造注入。\n','【设值注入】\n');
insert into `jh` (`timu`, `ans`) values('Struts2预定义结果类型中用来处理Action链的是【】结果类型。\n','【chain】\n');
insert into `jh` (`timu`, `ans`) values('配置默认拦截器需要使用【】元素。\n','【<default-interceptor-ref>】\n');
insert into `jh` (`timu`, `ans`) values('在Spring中使用bean元素的【】属性定义Bean的作用域。\n','【scope】\n');
insert into `jh` (`timu`, `ans`) values('<s:iterator>标签的step属性默认值为【】。\n','【1】\n');
insert into `jh` (`timu`, `ans`) values('Struts2框架的核心组件是【】和【】。\n','【Action】【拦截器】\n');
insert into `jh` (`timu`, `ans`) values('在使用<s:param>标签的value属性指定参数时，如果不添加单引号，则表示该值为一个引用对象，如果该对象不存在，则为其属性赋值为【】。\n','【null】\n');
insert into `jh` (`timu`, `ans`) values('在Spring容器中，<bean>元素中的lazy-init属性的默认值为【】。\n','【false】\n');
insert into `jh` (`timu`, `ans`) values('在struts.xml配置文件中用来包含其他的配置文件的是【】元素\n','【<include>】\n');
insert into `jh` (`timu`, `ans`) values('Struts2标签库主要分为普通标签和【】标签。\n','【UI】\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate的核心API中，【】代表面向对象的一个Hibernate查询操作。\n','【Query】\n');
insert into `jh` (`timu`, `ans`) values('Hibernate的缓存分为一级缓存和二级缓存，其中【】级缓存为Hibernate的内置缓存。\n','【一】\n');
insert into `jh` (`timu`, `ans`) values('Hibernate持久化对象状态可以转换，当一个对象被执行new关键字创建后，该对象处于【】态。\n','【瞬时】\n');
insert into `jh` (`timu`, `ans`) values('Action控制类中execute()方法的权限修饰符为【】。\n','【public】\n');
insert into `jh` (`timu`, `ans`) values('【】是Struts2的核心组件部分。\n','【拦截器】\n');
insert into `jh` (`timu`, `ans`) values('主要用于对集合中的数据进行迭代的控制标签是【】标签。\n','【<s:iterator>】\n');
insert into `jh` (`timu`, `ans`) values('在一级缓存常用操作中，调用Session的【】方法时，可以执行清除缓存的操作。\n','【clear()】\n');
insert into `jh` (`timu`, `ans`) values('在sturts.xml文件中，使用【】元素来配置Result逻辑视图与物理视图之间的映射。\n','【<result>】\n');
insert into `jh` (`timu`, `ans`) values('Struts2的表单标签中，【】标签用来生成选项组。\n','【<s:optgroup>】\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate的核心API中，主要用于启动、加载、管理hibernate配置文件信息的是【】实例。\n','【Configuration】\n');
insert into `jh` (`timu`, `ans`) values('【】的全称是 Aspect Oriented Programing，即面向切面编程。\n','【AOP】\n');
insert into `jh` (`timu`, `ans`) values('在Spring依赖注入方式中，使用设值注入时，在Spring配置文件中，需要使用<bean>元素的子元素【】元素来为每个属性注入值。\n','【<property>】\n');
insert into `jh` (`timu`, `ans`) values('在Spring依赖注入方式中，使用构造注入时，在配置文件里主要是使用【】标签来定义构造方法的参数。\n','【<constructor-arg>】\n');
insert into `jh` (`timu`, `ans`) values('Struts2的表单标签中，用于创建多行文本框的是【】标签。\n','【<s:textarea>】\n');
insert into `jh` (`timu`, `ans`) values('事务有很严格的定义，需要同时满足四个特性，即原子性、一致性、【】、持久性。\n','【隔离性】\n');
insert into `jh` (`timu`, `ans`) values('当某个持久化状态的实例与Session的关联被关闭时就变成了【】态。\n','【脱管】\n');
insert into `jh` (`timu`, `ans`) values('在struts2中自定义拦截器，实现【】功能。\n','【权限控制、性能监控】\n');
insert into `jh` (`timu`, `ans`) values('在Hibernate的核心API中，【】接口主要用于管理事务。\n','【Transaction】\n');
insert into `jh` (`timu`, `ans`) values('目前最流行的AOP框架有两个，分别为【】 和 AspectJ。\n','【Spring AOP】\n');
insert into `jh` (`timu`, `ans`) values('Struts2的所有表单标签对应的类都继承自【】类。\n','【UIBean】\n');
insert into `jh` (`timu`, `ans`) values('在Struts2中，【】标签用于查看ValueStack中的信息。\n','【<s:debug>】\n');
insert into `jh` (`timu`, `ans`) values('Hibernate版本下载并解压完的目录中，【】文件夹用于存放Hibernate编译和运行所依赖的JAR包。\n','【lib】\n');
insert into `jh` (`timu`, `ans`) values('在Struts2中，Action处理请求参数有两种方式，分别是属性驱动和【】。\n','【模型驱动】\n');
insert into `jh` (`timu`, `ans`) values('持久化对象分为哪些状态。\n','正确答案：(1)瞬时状态 (2)脱管状态 (3)持久状态\n');
insert into `jh` (`timu`, `ans`) values('请解释<s:actionerror>标签的作用。\n','正确答案：如果Action实例的getActionError()方法返回不为null\",\"则该标签负责输出该方法返回的系列错误。\n');
insert into `jh` (`timu`, `ans`) values('请简述在进行Spring和Hibernate整合时，不使用hibernate.cfg.xml文件在使用hibernate.cfg.xml 文件的基础下，进行了哪些关键操作的修改。\n','正确答案：修改如下：\n（1）在DAO层中不再使用HibernateTemplate\",\"而是改为使用HibernateDaoSupport。\n（2）创建c3p0-db.properties文件\",\"将链接数据库的基本4项编写在c3p0-db.properties文件中。\n（3）删除hibernate.cfg.xml配置文件\",\"将hibernate.cfg.xml文件中的内容配置在applicationContext.xml文件中。\n');
insert into `jh` (`timu`, `ans`) values('请列出enctype属性有哪些属性值。\n','正确答案：(1)application/x-www-form-urlencoded\n(2)multipart/form-data\n(3)text/plain\n');
insert into `jh` (`timu`, `ans`) values('如果在多个文件中配置了同一个Struts2常量，Struts2框架加载常量是有一定顺序的，请按照加载顺序列举出这些配置文件。\n','正确答案：Struts2框架加载常量的顺序如下：\n（1）default.properties\n（2）struts-default.xml\n（3）struts-plugin.xml\n（4）struts.xml\n（5）struts.properties\n（6）web.xml\n');
insert into `jh` (`timu`, `ans`) values('请简要说明访问Servlet API的几种方式。\n','正确答案：(1) ActionContext类\n(2) ServletActionContext静态类\n(3) 接口注入\n');
insert into `jh` (`timu`, `ans`) values('请列举出Hibernate开发过程中常用的5个核心接口。\n','正确答案：(1)Configuration\n(2)SessionFactory\n(3)Session\n(4)Transaction\n(5)Query\n');
insert into `jh` (`timu`, `ans`) values('请列举出<action>元素中的属性，并说说它们的作用。\n','正确答案：<action>元素中的属性共有4个\",\"具体如下：\n 1）name：标识Action\",\"指定了Action所处理的请求的URL。\n 2）class：指定Action对应对应的实现类。\n 3）method：指定请求Action时调用的方法。\n 4）converter：指定类型转换器的类。\n');
insert into `jh` (`timu`, `ans`) values('请列举Struts2 默认提供的4种主题，并分别对这些主题的作用进行简单的说明。\n','正确答案：Struts2 默认提供了4种主题\",\"分别为simple、xhtml、css_xhtml和Ajax。\n 1）simple 主题：这是最简单的主题\",\"使用该主题时\",\"每个UI标签只生成最基本的HTML元素\",\"没有任何附加功能。\n 2）xhtml 主题：这是Struts2 的默认主题\",\"它对simple主题进行了扩展\",\"提供了布局功能、Label显示名称、以及与验证框架和国际化框架的集成。\n 3）css_xhtml ：该主题是对xhtml的扩展\",\"在xhtml的基础之上添加对CSS的支持和控制。\n 4）Ajax ：继承自xhtml\",\"提供Ajax支持。\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是事务隔离级别中的读已提交。\n','正确答案：一个事务在执行过程中\",\"既可以访问其他事务成功提交的新插入的数据\",\"又可以访问成功修改的数据。读取数据的事务允许其他事务继续访问该行数据\",\"但是未提交的写事务将会禁止其他事务访问该行。此隔离级别可有效防止脏读。\n');
insert into `jh` (`timu`, `ans`) values('请列举出事务的特性。\n','正确答案：(1) 原子性(2)一致性(3)隔离性(4)持久性\n');
insert into `jh` (`timu`, `ans`) values('请简要说明拦截器的工作原理。\n','正确答案：Struts2拦截器的实现原理与Servlet过滤器的实现原理类似\",\"它以链式执行\",\"对真正要执行的方法（execute()）进行拦截。首先执行Action配置的拦截器\",\"在Action和Result执行之后\",\"拦截器会再次执行（与先前调用顺序相反）\",\"在此链式执行的过程中\",\"每一个拦截器都可以直接返回\",\"从而终止余下的拦截器、Action及Result的执行。\n');
insert into `jh` (`timu`, `ans`) values('请列举数据库中多表之间存在的几种关系。\n','正确答案：数据库中多表之间存在着三种关系\",\"分别为多对多、一对多和一对一关系。\n');
insert into `jh` (`timu`, `ans`) values('请编写一段代码，举例如何通过从ActionSupport类继承的方式实现Action控制类。\n','正确答案：import com.opensymphony.xwork2.ActionSupport;\npublic class LoginAction extends ActionSupport{\n@Override\npublic String execute() throws Exception {\nreturn super.execute();\n}\n}\n');
insert into `jh` (`timu`, `ans`) values('请简单描述Spring JDBCTemplate的优势。\n','正确答案：JDBC虽然具有功能强大、应用灵活、使用简单等优点\",\"但是在每次数据库操作中\",\"都有很多重复的工作要做\",\"这使得代码的重用性很低。另外\",\"如果数据库的用户名和密码发生变动\",\"在实际项目中如果涉及到整个程序\",\"其改动量是相当大的。\nSpring框架针对JDBC访问数据库存在的重复劳动问题\",\"对JDBC进行了必要的封装处理\",\"使得编程人员对其并不关心的重复工作自动完成。这就大大减轻了编程的工作量\",\"提高了工作效率。在Spring框架中\",\"如果需要修改数据库用户名和密码\",\"只需要修改一处即可\",\"这样带来的好处也是显而易见的。此外\",\"Spring框架对事务的处理、异常的处理都可以进行统一管理。\n');
insert into `jh` (`timu`, `ans`) values('Bean的作用域scope属性值有哪些？\n','正确答案：(1)singleton(2)prototype(3)request(4)session(5)globalsession\n');
insert into `jh` (`timu`, `ans`) values('请简述AOP专业术语中的Joinpoint表示的含义。\n','正确答案：Joinpoint表示连接点\",\"是指那些被拦截到的点\",\"在Spring中\",\"可以被动态代理拦截目标类的方法。\n');
insert into `jh` (`timu`, `ans`) values('请简述关联关系中的反转和级联操作分别是什么。\n','正确答案：反转操作在映射文件中通过对集合的inverse属性的设置\",\"来控制关联关系和对象的级联关系。级联操作是指当主控方执行保存、更新或者删除操作时\",\"其关联对象（被控方）也执行相同的操作。\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是Spring的IoC思想。\n','正确答案：所谓的IoC（控制反转）是指在程序的设计中\",\"实例不再由调用者来创建\",\"而是由Spring容器来创建。Spring容器会负责控制程序之间的关系\",\"而不是由程序代码直接控制\",\"这样控制权由应用代码转移到了外部容器\",\"控制权发生了反转\",\"也就是Spring的IoC思想。\n');
insert into `jh` (`timu`, `ans`) values('请简述Hibernate持久化类编写的规则。\n','正确答案：通常持久化类的编写应该遵循一些规则\",\"具体如下：\n 1）持久化类中必须提供无参数 public 构造器。(如果没有提供任何构造方法\",\"虚拟机会自动提供默认构造方法\",\"但是如果提供了其它有参数的构造方法的话\",\"虚拟机就不再提供默认构造方法\",\"必须要手动编写无参构造方法)。\n 2）持久化类中所有属性使用private修饰\",\"提供public的getters和setters方法。\n 3）必须提供标识属性OID\",\"与数据库表中主键对应\",\"例如Customer类id属性。\n 4）持久化类属性应尽量使用基本数据类型的包装类型。例如int类型的使用Integer 、long类型的使用 Long\",\"目的是为了与数据库表的字段默认值null一致。\n 5）持久化类不要用final修饰\",\"使用final将无法生成代理对象进行优化。\n');
insert into `jh` (`timu`, `ans`) values('简要说明package元素的有哪些属性以及各自的含义。\n','正确答案：name: 必填属性\",\"它指定该包的名字\",\"此名字是该包被其他包引用的key。\nnamespace: 可选属性\",\"该属性定义该包的命名空间。\nextends: 可选属性\",\"它指定该包继承自其他包。继承其他包\",\"可以继承其他包中的Action定义、拦截器定义等。\nabstract: 可选属性\",\"它指定该包是否是一个抽象包\",\"抽象包中不能包含Action定义。\n');
insert into `jh` (`timu`, `ans`) values('请简述值栈的生命周期。\n','正确答案：Struts2框架把ValueStack对象保存在名为“struts.valueStack”的request属性中\",\"也就是说ValueStack与Action的生命周期保持一致\",\"ValueStack的生命周期是随着request的创建而创建\",\"随request的销毁而销毁。\n');
insert into `jh` (`timu`, `ans`) values('请解释 <s:actionmessage>标签的作用。\n','正确答案：如果action实例的getActionMessage()方法返回不为null\",\"则该标签负责输出该方法返回的系列信息。\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是事务隔离级别中的读未提交。\n','正确答案：一个事务在执行过程中\",\"既可以访问其他事务未提交的新插入的数据\",\"又可以访问未提交的修改数据。如果一个事务已经开始写数据\",\"则另外一个事务则不允许同时进行写操作\",\"但允许其他事务读此行数据。此隔离级别可防止丢失更新。\n');
insert into `jh` (`timu`, `ans`) values('请列举出依赖注入的三种方式。\n','正确答案：(1) 属性setter注入(2)构造方法注入(3)接口注入\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是事务的原子性。\n','正确答案：原子性（Atomic）表示将事务中所做的操作捆绑成一个不可分割的单元\",\"即对事务所进行的数据修改等操作\",\"要么全部执行\",\"要么全都不执行。\n');
insert into `jh` (`timu`, `ans`) values('请简要说明dispatcher结果类型与redirect结果类型的不同。\n','正确答案：dispatcher这种结果类型与redirect非常相似\",\"dispatcher结果类型是将请求转发到JSP视图资源\",\"而redirect类型是将请求重定向到JSP视图资源。它们之间最大的差别就是一个是请求转发、一个是请求重定向\",\"当然\",\"如果重定向了请求\",\"那么将丢失所有参数\",\"其中包括Action的处理结果。\n');
insert into `jh` (`timu`, `ans`) values('怎样在struts.xml文件中设置Struts2框架为开发模式。\n','正确答案：<contant name=”struts.devMode” value=”true”/>\n');
insert into `jh` (`timu`, `ans`) values('简述Action 类的execute()方法的有哪些要求。\n','正确答案：(1) 方法的权限修饰符为public。\n(2) 返回一个字符串\",\"就是指示的下一个页面的Result。\n(3) 方法没有参数。\n');
insert into `jh` (`timu`, `ans`) values('请列举Spring容器所支持的Bean的装配方式。\n','正确答案：Spring容器支持多种形式的Bean的装配方式\",\"如基于XML的装配、基于Annotation的装配和自动装配。\n');
insert into `jh` (`timu`, `ans`) values('请列举PlatformTransactionManager接口提供了哪些事务操作方法，并对这些方法分别进行简单说明。\n','正确答案：PlatformTransactionManager接口中提供了三个事务操作方法\",\"具体如下：\n 1）TransactionStatus getTransaction(TransactionDefinition definition )：用于获取事务状态信息。\n 2）void commit(TransactionStatus status)：用于提交事务。\n 3）void rollback(TransactionStatus status)：用于回滚事务。\n');
insert into `jh` (`timu`, `ans`) values('Bean的实例化有哪些方式。\n','正确答案：(1) 构造器实例化2) 静态工厂实例化(3) 实例工厂实例化\n');
insert into `jh` (`timu`, `ans`) values('请说明@Component、@Service、@Controller、@Autowire注解的作用。\n','正确答案：(1)@Repository：用于将数据访问层 (DAO 层 ) 的类标识为Spring中的Bean\",\"其功能与 @Component 相同。\n(2)@Service：通常作用在业务层（Service层）\",\"用于将业务层的类标识为Spring中的Bean\",\"其功能与 @Component 相同。\n(3)@Constroller：通常作用在控制层（如Struts2的Action）\",\"用于将控制层的类标识为Spring中的Bean\",\"其功能与 @Component 相同。\n(4) @Autowired：用于对Bean的属性变量、属性的Set方法及构造函数进行标注\",\"配合对应的注解处理器完成Bean的自动配置工作。默认按照Bean的类型进行装配。\n');
insert into `jh` (`timu`, `ans`) values('请解释 <s:actionmessage>标签的作用。\n','正确答案：如果Action实例存在表单域的类型转换错误、校验错误\",\"则该标签负责输出这些错误提示。\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是QBC检索方式。\n','正确答案：QBC(Query By Criteria)是Hibernate提供的另一种检索对象的方式\",\"它主要由Criteria接口、Criterion接口和Expression类组成。Criteria接口是Hibernate API中的一个查询接口\",\"它需要由session进行创建。Criterion是Criteria的查询条件\",\"在Criteria中提供了add(Criterion criterion)方法来添加查询条件。\n');
insert into `jh` (`timu`, `ans`) values('请解释HibernateTemplate、LocalSessionFactoryBean和HibernateTransactionManage三个对象的作用。\n','正确答案： HibernateTemplate：相当于Hibernate的session可以直接操作PO类\",\"依赖于SessionFactory。\n LocalSessionFactoryBean：获得SessionFactory 。\n HibernateTransactionManager：Hibernate的事务管理器。\n');
insert into `jh` (`timu`, `ans`) values('请简述Hibernate中get()和load()两种加载数据方式的区别。\n','正确答案：区别是使用get()方法加载数据时\",\"如果指定的记录不存在\",\"则返回null\",\"而使用load()方法加载数据时\",\"如果指定记录不存在\",\"则会报出ObjectNotfountException异常\",\"这一异常说明使用load()方法加载数据时\",\"要求记录必须存在。\n');
insert into `jh` (`timu`, `ans`) values('请列举出文件上传对表单的要求。\n','正确答案：(1) enctype=” multipart/form-data”\n(2) 请求方式为POST\n(3) 使用<input type=”file”/>或者<s:file/>\n');
insert into `jh` (`timu`, `ans`) values('请简述事务需要满足的特征。\n','正确答案：事务有很严格的定义\",\"需要同时满足四个特性\",\"即原子性、一致性、隔离性、持久性。这四个特性通常称之为ACID特性\",\"具体如下：\n 原子性（Atomic）：表示将事务中所做的操作捆绑成一个不可分割的单元\",\"即对事务所进行的数据修改等操作\",\"要么全部执行\",\"要么全都不执行；\n 一致性（Consistency）：表示事务完成时\",\"必须使所有的数据都保持一致状态。\n 隔离性（Isolation）：指一个事务的执行不能被其它事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的\",\"并发执行的各个事务之间不能互相干扰。\n 持久性（Durability）：持久性也称永久性（permanence）\",\"指一个事务一旦提交\",\"它对数据库中数据的改变就应该是永久性的。提交后的其他操作或故障不会对其有任何影响。\n');
insert into `jh` (`timu`, `ans`) values('请简要说出Struts2的执行流程。\n','正确答案：（1）首先客户端浏览器发送一个请求（HttpServletRequest）。\n（2）接着程序会调用StrutsPrepareAndExecuteFilter\",\"然后询问ActionMapper这个请求是否需要调用某个Action。\n（3）如果ActionMapper决定需要调用某个Action\",\"StrutsPrepareAndExecuteFilter会把请求的处理交给ActionProxy。\n（4）ActionProxy通过配置管理器（Configuration Manager）从配置文件（struts.xml）中读取框架的配置信息\",\"从而找到需要调用的Action类。\n（5）然后ActionProxy会创建一个ActionInvocation的实例。\n（6）ActionInvocation使用命名模式来调用Action\",\"在调用Action前\",\"会依次调用所有配置的拦截器（Intercepter1、Intercepter2……）。\n（7）一旦Action执行完\",\"返回结果字符串\",\"ActionInvocation就会负责查找结果字符串对应的Result\",\"然后执行这个Result。通常情况下Result会调用一些模板（JSP等）来呈现页面。\n（8）产生的Result信息返回给ActionInvocation\",\" 此过程中拦截器会被再次执行（顺序与Action执行之前相反）。\n（9）最后产生一个HttpServletResponse的响应行为\",\"通过StrutsPrepareAndExecuteFilter反馈给客户端。\n');
insert into `jh` (`timu`, `ans`) values('说说AOP和IOC的概念以及在spring中是如何应用的。\n','正确答案：AOP:面向方面编程。\nioc：依赖注入；声明式事务和编程式事务积极一些通用部分。\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是ORM。\n','正确答案：所谓的ORM就是利用描述对象和数据库表之间映射的元数据\",\"自动把Java应用程序中的对象\",\"持久化到关系型数据库的表中。通过操作Java对象\",\"就可以完成对数据库表的操作。可以把ORM理解为关系型数据和对象的一个纽带\",\"开发人员只需要关注纽带一端映射的对象即可。\n');
insert into `jh` (`timu`, `ans`) values('请写出在JSP文件导入Struts2标签库的代码片段，并做简要解释。\n','正确答案：在JSP文件使用taglib指令导入Struts2标签库\",\"具体代码如下：\n<%@taglib prefix=\"s\" uri=\"/struts-tags\" %>\n在上述代码片段中\",\"taglib指令的uri属性用于指定引入标签库描述符文件的URI\",\"prefix属性用于指定引入标签库描述符文件的前缀\",\"建议使用“s”前缀。\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是HQL检索方式及其功能。\n','正确答案：HQL（Hibernate Query Language）是面向对象的查询语言\",\"它和SQL查询语言有些相似\",\"但它使用的是类、对象和属性的概念\",\"而没有表和字段的概念。在Hibernate提供的各种检索方式中\",\"HQL是官方推荐的查询语言\",\"也是使用最广的一种检索方式。它具有如下功能。\n 1）在查询语句中设定各种查询条件。\n 2）支持投影查询\",\"即仅检索出对象的部分属性。\n 3）支持分页查询。\n 4）支持分组查询\",\"允许使用group by和having关键字。\n 5）提供内置聚集函数\",\"如sum()、min()和max()。\n 6）能够调用用户定义的SQL函数。\n 7）支持子查询\",\"即嵌套查询。\n 8）支持动态绑定参数。\n');
insert into `jh` (`timu`, `ans`) values('请列举出常用的struts2 UI主题。\n','正确答案：(1)<s:form>(2)<s:submit>(3)<s:textfield>(4)<s:textarea>(5)<s:password>(6)<s:radio>(7)<s:checkbox>(8)<s:checkboxlist>(9)<s:select>(10)<s:optgroup>(11)<s:file>(12)<s:hidden>(13)<s:reset>\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是HQL检索中的投影查询。\n','正确答案：在通常的查询过程中\",\"有时只需查询部分属性\",\"并不需要查询一个类的所有属性。如果仍然查询所有属性\",\"是十分影响查询性能的。为此\",\"在Hibernate中提供了投影查询\",\"用来查询对象的部分属性。\n');
insert into `jh` (`timu`, `ans`) values('请分别简要说明Action和Servlet API解耦带来很多好处和缺点。\n','正确答案：好处：Action并没有直接和Servlet API进行耦合\",\"和Servlet关联度低\",\"方便Action进行单元测试。\n缺点：在实现业务逻辑时\",\"经常要访问Servlet中的对象\",\"但是解耦使得Action不能直接访问Servlet API。\n');
insert into `jh` (`timu`, `ans`) values('请说明@Controller、@Service、@Transactional、@Autowired和@Repository注解的作用。\n','正确答案：@Controller用来标注web层信息\",\"在Spring容器中注册实例。\n@Service用来标注配置的Service层信息。\n@Transactional用来配置事务。\n@Autowire用来自动注入Hibernate模板。\n@Repository用来标注配置DAO层。\n');
insert into `jh` (`timu`, `ans`) values('请列举级联操作中，你所知道的cascade的相关属性的可选值，并分别说明。\n','正确答案：cascade的相关属性可选值如下：\n save-update：在执行save、update或saveOrUpdate时进行关联操作。\n delete：在执行delete时进行关联操作。\n delete-orphan：表示孤儿删除\",\"即删除所有和当前对象解除关联关系的对象。\n all：所有情况下均进行关联操作\",\"但不包含delete-orphan的操作。\n all-delete-orphan：所有情况下均进行关联操作。\n none：所有情况下均不进行关联操作。这是默认值。\n');
insert into `jh` (`timu`, `ans`) values('简述<s:form>标签中包含哪些属性，并分别进行说明。\n','正确答案：<s:form>标签中包含三个属性：action、method和enctype。其中action属性用于指定提交时对应的action方法\",\"method属性用于设置表单的提交方式\",\"而enctype属性的取值决定了表单数据的编码方式。\n');
insert into `jh` (`timu`, `ans`) values('请列举事务需要满足的特性。\n','正确答案：事务需要同时满足四个特性\",\"分别是原子性、一致性、隔离性、持久性。\n');
insert into `jh` (`timu`, `ans`) values('请列举出事务的并发问题。\n','正确答案：(1)脏读(2)不可重复读(3)虚读/幻读(4)丢失更新\n');
insert into `jh` (`timu`, `ans`) values('请简述Hibernate中持久化对象持久态的特点。\n','正确答案：脱管态也称离线态或者游离态\",\"当某个持久化状态的实例与Session的关联被关闭时就变成了脱管态。脱管态对象存在持久化标识OID\",\"并且仍然与数据库中的数据存在关联\",\"只是失去了与当前Session的关联\",\"脱管状态对象发生改变时Hibernate不能检测到。\n');
insert into `jh` (`timu`, `ans`) values('请简述Struts2常量配置的三种方式并举例。\n','正确答案：（1）在struts.xml文件中通过<constant>元素配置常量。在配置时\",\"需要指定两个必填的属性name和value。\n<struts>\n<!-- 设置默认编码集为UTF-8 -->\n<constant name=\"struts.i18n.encoding\" value=\"UTF-8\" />\n<!-- 设置使用开发模式 -->\n<constant name=\"struts.devMode\" value=\"true\" />\n</struts>\n（2）在struts.properties文件中配置常量。每个key对应一个value\",\"key表示的是Struts2框架中的常量\",\"而value则是其常量值。\n### 设置默认编码集为UTF-8\nstruts.i18n.encoding=UTF-8\n### 设置不使用开发模式\nstruts.devMode=false\n（3）在web.xml文件中通过初始化参数配置常量。通过<filter>元素的<init-param>子元素指定\",\"每个<init-param>元素配置了一个Struts2常量。\n<filter>\n<!-- 指定Struts2的核心过滤器 -->\n<filter-name>struts2</filter-name>\n<filter-class>\norg.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter\n</filter-class>\n<!--通过init-param元素配置Struts2常量\",\"配置默认编码集为UTF-8 -->\n<init-param>\n<param-name>struts.i18n.encoding</param-name>\n<param-value>UTF-8</param-value>\n</init-param>\n</filter>\n');
insert into `jh` (`timu`, `ans`) values('请列举出事务的隔离级别。\n','正确答案：(1)读未提交(2)读已提交(3)可重复读(4)序列化\n');
insert into `jh` (`timu`, `ans`) values('请列举出二级缓存的内部结构。\n','正确答案：(1)类缓存区域\n(2)集合缓存区域\n(3)更新时间戳区域\n(4)查询缓存区域\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是脏读。\n','正确答案：脏读是指一个事务读取到另一个事务未提交的数据。\n');
insert into `jh` (`timu`, `ans`) values('属性驱动是指通过字段进行数据传递包括哪两种情况。\n','正确答案：(1) 与基本数据类型的属性对应。\n(2) 直接使用域对象。\n');
insert into `jh` (`timu`, `ans`) values('请描述Struts2中的拦截器与Servlet的过滤器有什么区别。\n','正确答案：(1)拦截器是基于java的反射机制的\",\"而过滤器是基于函数回调。\n(2)拦截器不依赖与servlet容器\",\"过滤器依赖与servlet容器。\n(3)拦截器只能对action请求起作用\",\"而过滤器则可以对几乎所有的请求起作用。\n(4)拦截器可以访问action上下文、值栈里的对象\",\"而过滤器不能访问。\n(5)在action的生命周期中\",\"拦截器可以多次被调用\",\"而过滤器只能在容器初始化时被调用一次。\n');
insert into `jh` (`timu`, `ans`) values('请简要说明OGNL的特点。\n','正确答案：(1) 支持对象方法调用。\n(2) 支持类静态方法调用和值访问。\n(3) 支持赋值操作和表达式串联。\n(4) 访问OGNL上下文。\n(5) 操作集合对象。\n');
insert into `jh` (`timu`, `ans`) values('请列举出Spring的核心容器由哪些模块组成。\n','正确答案：(1) Bean模块\n(2) Core核心模块\n(3) Context上下文模块\n(4) Expression Language模块\n');
insert into `jh` (`timu`, `ans`) values('请列举常用的struts2的控制标签和数据标签。\n','正确答案：控制标签：(1)<s:if>(2)<s:elseif>(3)<s:else>(4)<s:iterator>\n数据标签：(1)<s:propery>(2)<s:a>(3)<s:debug>(4)<s:include>(5)<s:param>\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是级联操作，以及cascade及其属性。\n','正确答案：级联操作是指当主控方执行保存、更新或者删除操作时其关联对象（被控方）也执行相同的操作。在映射文件中通过对cascade属性的设置来控制是否对关联对象采用级联操作。\ncascade定义的是有关联关系的对象之间的级联关系cascade的相关属性可选值如下：\n all ：所有情况下均进行关联操作。\n none：所有情况下均不进行关联操作。这是默认值。\n save-update：在执行save、update或saveOrUpdate时进行关联操作。\n delete：在执行delete时进行关联操作。\n');
insert into `jh` (`timu`, `ans`) values('请简述在Hibernate的二级缓存中，可以设定哪些类型的并发访问策略。\n','正确答案：在Hibernate的二级缓存中\",\"可以设定以下4种类型的并发访问策略\",\"来解决这些问题\",\" 每一种访问策略对应一种事务隔离级别\",\"具体介绍如下：\n 1）只读型(Read-Only)：提供Serializable数据隔离级别\",\"对于从来不会被修改的数据\",\" 可以采用这种访问策略。\n 2）读写型(Read-write)：提供 Read Commited 数据隔离级别\",\"对于经常读但是很少被修改的数据\",\"可以采用这种隔离类型\",\"因为它可以防止脏读。\n 3）非严格读写(Nonstrict-read-write)：不保证缓存与数据库中数据的一致性\",\"提供 Read Uncommited事务隔离级别\",\"对于极少被修改\",\"而且允许脏读的数据\",\"可以采用这种策略。\n 4）事务型(Transactional)：仅在受管理环境下适用\",\"它提供了Repeatable Read事务隔离级别。对于经常读但是很少被修改的数据\",\"可以采用这种隔离类型\",\"因为它可以防止脏读和不可重复读。\n');
insert into `jh` (`timu`, `ans`) values('请列举你所知道的Hibernate中核心接口Session中的常用方法，并简要说明其功能。\n','正确答案：在Session中提供了大量的常用方法\",\"具体如下：\n save()、update() 和saveOrUpdate()方法：用于增加和修改对象。\n delete()方法：用于删除对象。\n get()和load()方法：根据主键查询。\n createQuery() 和createSQLQuery()方法：用于数据库操作对象。\n createCriteria()方法：条件查询。\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是构造器实例化。\n','正确答案：构造器实例化是指Spring容器通过Bean对应的类中默认的构造函数来实例化Bean。\n');
insert into `jh` (`timu`, `ans`) values('请简述OGNL表达式语言的特点。\n','正确答案：Struts2默认的表达式语言就是OGNL\",\"它具有以下特点：\n 1）支持对象方法调用。\n 2）支持类静态方法调用和值访问\",\"表达式的格式为@[类全名(包括包路径)]@[方法名 |  值名]。\n 3）支持赋值操作和表达式串联。\n 4）访问OGNL上下文（OGNL context）和ActionContext。\n 5）操作集合对象。\n');
insert into `jh` (`timu`, `ans`) values('请比较BeanFactory和ApplicationContext这两种IoC容器。\n','正确答案：BeanFactory和ApplicationContext都是通过xml配置文件加载bean的\",\"相比之下\",\"ApplicationContext提供了更多的扩展功能\",\"其主要的优势在于延迟加载\",\"如果Bean的某一个属性没有注入\",\"使用BeanFacotry加载后\",\"在第一次调用getBean()方法时会抛出异常\",\"而ApplicationContext则在初始化时自检\",\"这样有利于检查所依赖属性是否注入。因此\",\"在实际开发中\",\"通常情况下系统都选择使用ApplicationContext\",\"而只有在系统资源较少时\",\"才考虑使用BeanFactory。\n');
insert into `jh` (`timu`, `ans`) values('请编写在JSP文件中，使用<s:radio>实现一个功能。\n要求如下：\n（1） 依次有篮球、排球和足球这3个爱好，只能3选1。\n（2） 默认选择足球\n','正确答案：<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\npageEncoding=\"UTF-8\"%>\n<%@ taglib prefix=\"s\" uri=\"/struts-tags\"%>\n<html>\n<head>\n<title>radio标签</title>\n</head>\n<body>\n<s:radio name=\"interest\" label=\"爱好\" list=\"#{\'0\':\'篮球\'\",\"\'1\':\'排球\'\",\"\'2\':\'足球\'}\" value=\"2\" />\n</body>\n</html>\n');
insert into `jh` (`timu`, `ans`) values('请编写一个代码片段，举例如何在web.xml文件中通过初始化参数配置常量，配置默认编码集为UTF-8。\n','正确答案：<filter>\n<!-- 指定Struts2的核心过滤器 -->\n<filter-name>struts2</filter-name>\n<filter-class>\norg.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter\n</filter-class>\n<!--通过init-param元素配置Struts2常量\",\"配置默认编码集为UTF-8-->\n<init-param>\n<param-name>struts.i18n.encoding</param-name>\n<param-value>UTF-8</param-value>\n</init-param>\n</filter>\n');
insert into `jh` (`timu`, `ans`) values('请简要阐述Struts2的执行流程。\n','正确答案：Struts2的执行流程如下：\n（1）首先客户端浏览器发送一个请求（HttpServletRequest）。\n（2）接着程序会调用StrutsPrepareAndExecuteFilter\",\"然后询问ActionMapper这个请是否需要调用某个Action。\n（3）如果ActionMapper决定需要调用某个Action\",\"StrutsPrepareAndExecuteFilter会把请求的处理交给ActionProxy。\n（4）ActionProxy通过配置管理器（Configuration Manager）从配置文件（struts.xml）中读取框架的配置信息\",\"从而找到需要调用的Action类。\n（5）然后ActionProxy会创建一个ActionInvocation的实例。\n（6）ActionInvocation使用命名模式来调用Action\",\"在调用Action前\",\"会依次调用所有配置的拦截器（Intercepter1、Intercepter2……）。\n（7）一旦Action执行完\",\"返回结果字符串\",\"ActionInvocation就会负责查找结果字符串对应的Result\",\"然后执行这个Result。通常情况下Result会调用一些模板（JSP等）来呈现页面。\n（8）产生的Result信息返回给ActionInvocation\",\" 此过程中拦截器会被再次执行（顺序与Action执行之前相反）。\n（9）最后产生一个HttpServletResponse的响应行为\",\"通过StrutsPrepareAndExecuteFilter反馈给客户端。\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是QBC检索的组合查询。\n','正确答案：组合查询是指通过Restrictions工具类的相应方法动态的构造查询条件\",\"并将查询条件加入Criteria对象\",\"从而实现查询功能。\n');
insert into `jh` (`timu`, `ans`) values('请列举Struts2的内置主题，并简述它们各自的效果。\n','正确答案：Struts 2 默认提供了4种主题\",\"分别为simple、xhtml、css_xhtml和Ajax。\n 1）simple 主题：这是最简单的主题\",\"使用该主题时\",\"每个UI标签只生成最基本的HTML元素\",\"没有任何附加功能。\n 2）xhtml 主题：这是Struts 2 的默认主题\",\"它对simple主题进行了扩展\",\"提供了布局功能、Label显示名称、以及与验证框架和国际化框架的集成。\n 3）css_xhtml ：该主题是对xhtml的扩展\",\"在xhtml的基础之上添加对CSS的支持和控制。\n 4）Ajax ：继承自xhtml\",\"提供Ajax支持。\n');
insert into `jh` (`timu`, `ans`) values('请简述Redirect结果类型的工作原理。\n','正确答案：使用redirect结果类型的工作过程如下：\n（1）浏览器发出一个请求\",\"Struts2框架调用对应的Action实例对请求进行处理。\n（2）Action返回“success”结果字符串\",\"Struts2框架根据这个结果选择对应的结果类型\",\"这里使用的是redirect结果类型。\n（3）ServletRedirectResult在内部使用HttpServletResponse的sendRedirect()方法将请求重新定向到目标资源。\n（4）浏览器重新发起一个针对目标资源的新请求。\n（5）目标资源作为响应呈现给用户。\n');
insert into `jh` (`timu`, `ans`) values('请写出Struts2框架的配置文件的加载顺序。\n','正确答案：(1) default.properties\n(2) struts-default.xml\n(3) struts-plugin.xml\n(4) struts.xml\n(5) struts.properties\n(6) web.xml\n');
insert into `jh` (`timu`, `ans`) values('Spring在web.xml文件中需要配置什么。\n','正确答案：<!-- 监听器 -->\n<context-param>\n<param-name>contextConfigLocation</param-name>\n<param-value>classpath:applicationContext.xml</param-value>\n</context-param>\n<listener>\n<listener-class>\norg.springframework.web.context.ContextLoaderListener\n</listener-class>\n</listener>\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是Hibernate事务处理方式的悲观锁。\n','正确答案：悲观锁是指在每次操作数据时\",\"总是悲观地认为会有其他事务也会来操作同一数据\",\"因此\",\"在整个数据处理过程中\",\"将会把数据处于锁定状态。悲观锁具有排它性\",\"一般由数据库来实现\",\"在锁定时间内\",\"其它事务不能对数据进行存取等操作\",\"这样可能导致长时间的等待问题。\n');
insert into `jh` (`timu`, `ans`) values('请简述Hibernate具有的优势。\n','正确答案：与其它操作数据库的技术相比\",\"Hibernate具有以下几点优势：\n 1）Hibernate对JDBC访问数据库的代码做了轻量级封装\",\"大大简化了数据访问层繁琐的重复性代码\",\"并且减少了内存消耗\",\"加快了运行效率。\n 2）Hibernate是一个基于JDBC的主流持久化框架\",\"是一个优秀的ORM实现\",\"它很大程度的简化了dao（Data Access Object\",\"数据访问对象）层编码工作。\n 3）Hibernate使用Java的反射机制\",\"而不是使用字节码增强程序类并实现透明性。\n 4）Hibernate的性能非常好\",\"映射的灵活性很出色。它支持很多关系型数据库\",\"从一对一到多对多的各种复杂关系。\n 5）可扩展性强\",\"由于源代码的开源以及API的开放\",\"当本身功能不够用时\",\"可以自行编码进行扩展。\n');
insert into `jh` (`timu`, `ans`) values('请简要说明Spring程序基本执行过程。\n','正确答案：首先定义配置文件的路径\",\"然后创建Spring容器\",\"加载配置文件\",\"并通过Spring容器获取接口的实现类对象并调用实例方法\",\"最后使用Junit测试运行测试方法\",\"打印结果到控制台。\n');
insert into `jh` (`timu`, `ans`) values('请简述Hibernate二级缓存的原理。\n','正确答案：二级缓存与一级缓存一样\",\"也是根据对象的ID来加载和缓存数据的。当执行某个查询获得的结果集为实体对象时\",\"Hibernate就会把获得的实体对象按照ID加载到二级缓存中。在访问指定的对象时\",\"首先从一级缓存中查找\",\"找到就直接使用\",\"找不到则转到二级缓存中查找（必须配置和启用二级缓存）。如果二级缓存中找到\",\"就直接使用\",\"否则会查询数据库\",\"并将查询结果放到一级缓存和二级缓存中。\n');
insert into `jh` (`timu`, `ans`) values('请编写BeanFactory加载配置信息的代码片段。\n','正确答案：创建BeanFactory实例时\",\"需要提供Spring所管理容器的详细配置信息\",\"这些信息通常采用XML文件形式来管理\",\"加载配置信息的代码片段如下：\nBeanFactory beanFactory =\nnew XmlBeanFactory(new FileSystemResource(\"F:/applicationContext.xml\"));\n');
insert into `jh` (`timu`, `ans`) values('Struts 2文件上传需要用到那两个包？根据你的理解，谈谈实现文件上传的步骤。\n','正确答案：Comons-fileupload-1.2.1.jar 和 commons-io-1.2.1.jar  第一步：在web-inf/lib下面添加必须的jar文件。\n第二步：把form表单的enctype设置为“multipart/form-data”; 第三步：在action类中；添加必要属性: private File upload;//得到上传文件的类型 private String uploadFIletype;//文件类型 private String uploadFileName;//文件名称 。\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是事务。\n','正确答案：在数据库操作中\",\"一项事务（Transaction）是由一条或多条操作数据库的SQL语句组成的一个不可分割的工作单元。当事务中的所有操作都正常完成时\",\"整个事务才能被提交到数据库中\",\"如果有一项操作没有完成\",\"则整个事务会被回滚。\n');
insert into `jh` (`timu`, `ans`) values('请简述@Resource和@Autowired注解的区别。\n','正确答案：@Resource作用与@Autowired一样。其区别在于@Autowired默认按照Bean类型装配\",\"而@Resource默认按照Bean实例名称进行装配。\n');
insert into `jh` (`timu`, `ans`) values('请简要描述值栈的作用和生命周期。\n','正确答案：值栈的作用：\n值栈可以作为一个数据中转站\",\"用于在前台-后台之间传递数据\",\"最典型的做法就是将Struts2标签与OGNL表达式的结合\",\"ValueStack(值栈)实际上是一个接口\",\"在Struts2中利用OGNL时\",\"实际上使用的是实现了该接口的OgnlValueStack类\",\"这个类是OGNL的基础。值栈就是OGNL 表达式存取数据的地方。\n值栈的生命周期：\nValueStack贯穿整个 Action 的生命周期\",\"每个Action 类的对象实例都拥有一个ValueStack对象\",\" 在其中保存当前Action 对象和其他相关对象。Struts 2框架把ValueStack 对象保存在名为 “struts.valueStack” 的request属性中\",\"也就是说ValueStack与Action的生命周期保持一致\",\"ValueStack的生命周期是随着request的创建而创建\",\"随request的销毁而销毁。\n');
insert into `jh` (`timu`, `ans`) values('下面关于向值栈存放数据 说法正确的是（）\n','正确答案：A\",\"B\",\"D\",\"E\n');
insert into `jh` (`timu`, `ans`) values('请列举<s:property>标签中的属性，并分别进行说明。\n','正确答案：<s:property>标签的属性及属性说明如下所示：\n 1）id：可选属性\",\"指定该元素的标识。\n 2）default：可选属性\",\"如果要输出的属性值为null\",\"则显示default属性的指定值。\n 3）escape：可选属性\",\"指定是否忽略HTML代码。\n 4）value：可选属性\",\"指定需要输出的属性值\",\"如果没有指定该属性\",\"则默认输出  ValueStack栈顶的值。\n');
insert into `jh` (`timu`, `ans`) values('请写出在struts.xml文件中，手动开启访问类静态方法的支持的代码。\n','正确答案：在低版本的Struts2中\",\"默认开启了访问类静态方法的支持\",\"但是高版本的Struts2中\",\"默认是关闭了这项支持的\",\"也就是说要想访问类的静态方法\",\"需要手动开启设置。其开启方法是在struts.xml中进行如下配置\",\"配置方式如下所示：\n<constant name=\"struts.ognl.allowStaticMethodAccess\" value=\"true\">\n</constant>\n');
insert into `jh` (`timu`, `ans`) values('请简要说明Spring框架的优点。\n','正确答案：(1)方便解耦、简化开发\n(2)AOP编程的支持\n(3)声明式事务的支持\n(4)方便程序的测试\n(5)方便集成各种优秀框架\n(6)降低JavaEE API的使用难度\n');
insert into `jh` (`timu`, `ans`) values('请简述Spring按照通知在目标类方法的连接点位置，可以分为哪些类型。\n','正确答案：Spring按照通知在目标类方法的连接点位置\",\"可以分为5种类型\",\"具体如下：\n 1）org.springframework.aop.MethodBeforeAdvice（前置通知）\n在目标方法执行前实施增强\",\"可以应用于权限管理等功能。\n 2）org.springframework.aop.AfterReturningAdvice（后置通知）\n在目标方法执行后实施增强\",\"可以应用于关闭流、上传文件、删除临时文件等功能。\n 3）org.aopalliance.intercept.MethodInterceptor（环绕通知）\n在目标方法执行前后实施增强\",\"可以应用于日志、事务管理等功能。\n 4）org.springframework.aop.ThrowsAdvice（异常抛出通知）\n在方法抛出异常后实施增强\",\"可以应用于处理异常记录日志等功能。\n 5）org.springframework.aop.IntroductionInterceptor（引介通知）\n在目标类中添加一些新的方法和属性\",\"可以应用于修改老版本程序（增强类）。\n');
insert into `jh` (`timu`, `ans`) values('简述struts2文件上传的方法。\n','正确答案：Commons FileUpload通过将HTTP的数据保存到临时文件夹\",\"然后Struts使用fileUpload拦截器将文件绑定到Action的实例中。从而我们就能够以本地文件方式的操作浏览器上传的文件。\n');
insert into `jh` (`timu`, `ans`) values('请简述Hibernate中持久化对象的状态。\n','正确答案：在Hibernate中持久化的对象可以划分为三种状态\",\"分别是瞬时态、持久态和脱管态\",\"这三种状态的详细介绍具体如下。\n瞬时态（transient）\n瞬时态也称为临时态或者自由态\",\"瞬时态的实例是由new命令创建、开辟内存空间的对象\",\"不存在持久化标识OID（相当于主键值）\",\"尚未与Hibernate Session关联\",\"在数据库中也没有记录\",\"失去引用后将被JVM回收。瞬时状态的对象在内存中是孤立存在的\",\"与数据库中的数据无任何关联\",\"仅是一个信息携带的载体。\n持久态（persistent）\n持久态的对象存在持久化标识OID \",\"加入到了Session缓存中\",\"并且相关联的Session没有关闭\",\"在数据库中有对应的记录\",\"每条记录只对应唯一的持久化对象\",\"需要注意的是\",\"持久态对象是在事务还未提交前变成持久态的。\n脱管态（detached）\n脱管态也称离线态或者游离态\",\"当某个持久化状态的实例与Session的关联被关闭时就变成了脱管态。脱管态对象存在持久化标识OID\",\"并且仍然与数据库中的数据存在关联\",\"只是失去了与当前Session的关联\",\"脱管状态对象发生改变时Hibernate不能检测到。\n');
insert into `jh` (`timu`, `ans`) values('请列举你所知道的Hibernate的检索方式。\n','正确答案：Hibernate的检索方式主要有5种\",\"分别为导航对象图检索方式、OID检索方式、HQL检索方式、QBC检索方式和SQL检索方式。\n');
insert into `jh` (`timu`, `ans`) values('请列举你知道的Hibernate中内置的主键生成策略，并作简要说明。\n','正确答案：Hibernate中常见内置的主键生成策略如下：\n increment：用于long、short、或int类型\",\"由Hibernate自动以递增的方式生成唯一标识符\",\"每次增量为1。\n identity：采用底层数据库本身提供的主键生成标识符\",\"条件是数据库支持自动增长数据类型。\n sequence：Hibernate根据底层数据库序列生成标识符\",\"条件是数据库支持序列。\n native：根据底层数据库对自动生成表示符的能力来选择identity、sequence、hilo三种生成器中的一种\",\"适合跨数据库平台开发。\n uuid：Hibernate采用128位的UUID算法来生成标识符。\n assigned：由java程序负责生成标识符\",\"如果不指定id元素的generator属性\",\"则默认使用该主键生成策略。\n');
insert into `jh` (`timu`, `ans`) values('请写出在web.xml文件中配置Struts2核心过滤器的代码片段。\n','正确答案：在web.xml文件中配置Struts2核心过滤器的代码片段如下所示：\n<!--配置Struts2核心控制器-->\n<filter>\n<filter-name>struts2</filter-name>\n<filter-class>\norg.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter\n</filter-class>\n</filter>\n<filter-mapping>\n<filter-name>struts2</filter-name>\n<url-pattern>/*</url-pattern>\n</filter-mapping>\n');
insert into `jh` (`timu`, `ans`) values('请说说Hibernate一级缓存的刷出时间点。\n','正确答案：默认情况下\",\" Session 在如下几种时间点刷出缓存：\n（1）当应用程序调用 Transaction 的 commit()方法时\",\"该方法先刷出缓存(调用session.flush()方法)\",\"然后再向数据库提交事务(调用tx.commit()方法)。\n（2）当应用程序执行一些查询操作时\",\"如果缓存中持久化对象的属性已经发生了变化\",\"会先刷出缓存\",\"以保证查询结果能够反映持久化对象的最新状态。\n（3）调用 Session 的 flush() 方法。\n');
insert into `jh` (`timu`, `ans`) values('请列举自动装配配置<bean>元素的autowire属性有哪些值，并分别说明。\n','正确答案：autowire属性有5个值\",\"其值说明如下所示。\n 1）byName：根据Property的Name自动装配\",\"如果一个bean的name\",\"和另一个bean中的Property的name相同\",\"则自动装配这个bean到Property中。\n 2）byType：根据Property的数据类型（Type）自动装配\",\"如果一个bean的数据类型\",\"兼容另一个bean中Property的数据类型\",\"则自动装配。\n 3）constructor：根据构造函数参数的数据类型\",\"进行byType模式的自动装配。\n 4）autodetect：如果发现默认的构造函数\",\"用constructor模式\",\"否则用byType模式。\n 5）no：默认情况下\",\"不使用自动装配\",\"Bean依赖必须通过ref元素定义。\n');
insert into `jh` (`timu`, `ans`) values('请简述本章中Struts2入门案例的执行流程。\n','正确答案：项目启动\",\"一系列配置文件被加载\",\"如web.xml、struts.xml文件等。用户通过客户端浏览器发送了一个helloWorld.action请求\",\"该请求被核心控制器拦截到\",\"通过匹配struts.xml文件中的配置\",\"找到请求对应的执行类HelloWorldAction\",\"并默认调用HelloWorldAction中的execute()方法\",\"返回逻辑视图名\",\"然后再通过匹配找到并转发到对应的物理视图页面success.jsp中\",\"最后响应并输出返回结果。\n');
insert into `jh` (`timu`, `ans`) values('请说明如何对拦截器进行配置。\n','正确答案：拦截器的配置是在struts.xml文件中完成的\",\"它通常以<interceptor>标签开头\",\"以</interceptor>标签结束。定义拦截器的语法格式如下：\n<interceptor name=\"interceptorName\" class=\"interceptorClass\">\n<param name=\"paramName\">paramValue</param>\n</interceptor>\n上述语法格式中\",\"name属性用来指定拦截器的名称\",\"class属性用于指定拦截器的实现类。有时\",\"在定义拦截器时需要传入参数\",\"这时需要使用<param>标签\",\"其中name属性用来指定参数的名称\",\"paramValue表示参数的值。\n');
insert into `jh` (`timu`, `ans`) values('请描述struts2拦截器的工作原理。\n','正确答案：Struts2拦截器的实现原理与Servlet过滤器的实现原理类似\",\"它以链式执行\",\"对真正执行的方法execute()进行拦截。首先执行Action配置的拦截器\",\"在Action和Result执行之后\",\"拦截器会再次执行（与先前调用顺序相反）\",\"在此链式执行的过程中\",\"每一个拦截器都可以直接返回\",\"从而终止余下的拦截器、Action及Result的执行。\n');
insert into `jh` (`timu`, `ans`) values('AOP的专业术语包括Joinpoint、Pointcut、Advice、Target、Weaving、Proxy和Aspect，请对于这些专业术语进行解释说明。\n','正确答案：对于专业术语的解释\",\"具体如下：\n Joinpoint（连接点）：是指那些被拦截到的点\",\"在Spring中\",\"可以被动态代理拦截目标类的方法。\n Pointcut（切入点）：是指要对哪些Joinpoint进行拦截\",\"即被拦截的连接点。\n Advice（通知）：是指拦截到Joinpoint之后要做的事情\",\"即对切入点增强的内容。\n Target（目标）：是指代理的目标对象。\n Weaving（织入）：是指把增强代码应用到目标上\",\"生成代理对象的过程。\n Proxy（代理）：是指生成的代理对象。\n Aspect（切面）：是切入点和通知的结合。\n');
insert into `jh` (`timu`, `ans`) values('请简述实现自定义拦截器的两种方式。\n','正确答案：（1）实现Interceptor接口\",\"然后实现该接口中提供的init()、intercept()和destroy()这三个方法。\n（2）继承抽象拦截器类AbstractIntercepter\",\"该类实现了Interceptor接口\",\"并且提供了init()方法和destroy()方法的空实现。使用时\",\"可以直接继承该抽象类\",\"而不用实现那些不必要的方法。\n');
insert into `jh` (`timu`, `ans`) values('请说说Spring依赖注入方式中的设值注入要求一个Bean必须满足哪些要求。\n','正确答案：设值注入要求一个Bean必须满足以下两点要求：\n 1）Bean类必须提供一个默认的构造方法。\n 2）Bean类必须为需要注入的属性提供对应的set方法。\n');
insert into `jh` (`timu`, `ans`) values('请编写一个程序，实现Struts2文件下载。\n','正确答案：（1）创建下载页面simpledownload.jsp\",\"在页面中添加如下代码：\n<a href=\"simpledownload\">Struts2.txt</a>\n（2）在cn.itcast.action包中新建SimpleDownLoadAction.java文件\",\"此文件用于处理文件下载的核心操作。\npackage cn.itcast.action;\nimport java.io.InputStream;\nimport org.apache.struts2.ServletActionContext;\nimport com.opensymphony.xwork2.ActionSupport;\npublic class SimpleDownLoadAction  extends ActionSupport{\n//定义了返回InputStream的方法\",\"该方法作为被下载文件的入口\npublic InputStream getDownloadFile(){\nreturn ServletActionContext.getServletContext()\n.getResourceAsStream(\"/upload/Struts2.txt\");\n}\n@Override\npublic String execute() throws Exception {\nreturn SUCCESS;\n}\n}\n（3）配置struts.xml文件\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE struts PUBLIC\n\"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\"\n\"http://struts.apache.org/dtds/struts-2.3.dtd\">\n<struts>\n<package name=\"struts2\" namespace=\"/\" extends=\"struts-default\">\n<action name=\"simpledownload\"\nclass=\"cn.itcast.action.SimpleDownLoadAction\">\n<result type=\"stream\">\n<!--文件类型 -->\n<param name=\"contentType\">text/plain</param>\n<!--指定文件名 -->\n<param name=\"contentDisposition\">\nattachment;filename=\"Struts2.txt\"\n</param>\n<!--输入流 -->\n<param name=\"inputName\">downloadFile</param>\n</result>\n</action>\n</package>\n</struts>\n');
insert into `jh` (`timu`, `ans`) values('请列举5个常用的预定义的结果类型及作用。\n','正确答案：(1) chain：用来处理Action链\",\"被跳转的Action中仍然获取上个页面的值如request信息。\n(2) dispatcher：用来转向页面\",\"通常处理JSP\",\"是默认的结果类型。\n(3) redirect：重定向到一个URL\",\"被跳转的页面中丢失传递的信息。\n(4) redirectAction：重定向到一个Action\",\"调转的页面中丢失传递的信息。\n(5) stream：向浏览器发送InputStream对象\",\"通常用来处理文件下载\",\"还可用于Ajax数据。\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是OGNL。\n','正确答案：OGNL的全称是对象图导航语言（Object-Graph Navigation Language）\",\"它是一种功能强大的开源表达式语言\",\"使用这种表达式语言\",\"可以通过某种表达式语法\",\"存取Java对象的任意属性\",\"调用Java对象的方法\",\"同时能够自动实现必要的类型转换。如果把表达式看作是一个带有语义的字符串\",\"那么OGNL无疑成为了这个语义字符串与Java对象之间沟通的桥梁。\n');
insert into `jh` (`timu`, `ans`) values('请简述实现Action控制类的方式并举例。\n','正确答案：实现Action控制类的方式分别如下：\n（1）POJO的实现\npublic class LoginAction {\nprivate String username;\nprivate String password;\npublic String getUsername() {\nreturn username;\n}\npublic void setUsername(String username) {\nthis.username = username;\n}\npublic String getPassword() {\nreturn password;\n}\npublic void setPassword(String password) {\nthis.password = password;\n}\npublic String execute() throws Exception {\nreturn \"success\";\n}\n}\n（2）实现Action接口\nimport com.opensymphony.xwork2.Action;\npublic class LoginAction implements Action {\npublic String execute() throws Exception {\nreturn \"success\";\n}\n}\n（3）继承ActionSupport类\nimport com.opensymphony.xwork2.ActionSupport;\npublic class LoginAction extends ActionSupport{\npublic String execute() throws Exception {\nreturn \"success\";\n}\n}\n');
insert into `jh` (`timu`, `ans`) values('请使用两种方式，分别实现一个自定义拦截器。\n','正确答案：// 方式一：\nimport com.opensymphony.xwork2.ActionInvocation;\nimport com.opensymphony.xwork2.interceptor.AbstractInterceptor;\npublic class PrivilegeInterceptor extends AbstractInterceptor {\n@Override\npublic String intercept(ActionInvocation invocation) throws Exception {\nreturn null;\n}\n}\n// 方式二：\nimport com.opensymphony.xwork2.ActionInvocation;\nimport com.opensymphony.xwork2.interceptor.Interceptor;\npublic class PrivilegeInterceptor implements Interceptor{\n@Override\npublic void init() {\n}\n@Override\npublic String intercept(ActionInvocation invocation) throws Exception {\nreturn null;\n}\n@Override\npublic void destroy() {\n}\n}\n');
insert into `jh` (`timu`, `ans`) values('简述获取Session实例有哪两种方式，并用具体的代码片段举例说明。\n','正确答案：获取Session实例有两种方式\",\"一种是通过openSession()方法\",\"另一种是通过getCurrentSession()方法。两种方法获取Session的代码如下所示：\n//采用openSession方法创建session\nSession session = sessionFactory.openSession();\n//采用getCurrentSession()方法创建session\nSession session = sessionFactory.getCurrentSession();\n');
insert into `jh` (`timu`, `ans`) values('请列举Spring 3中定义的五种Bean的作用域，并分别进行说明。\n','正确答案：Spring 3为Bean实例定义了五种Bean的作用域\",\"分别是singleton（单例）、prototype（原型）、request、session和global Session。这五种作用域说明如下所示。：\n 1）singleton：单例模式\",\"使用singleton定义的bean在Spring容器中将只有一个实例\",\"也就是说\",\"无论有多少个Bean引用它\",\"始终将指向同一个对象。这也是Spring容器默认的作用域。\n 2）prototype：原型模式\",\"每次通过Spring容器获取的prototype定义的Bean时\",\"容器都将创建一个新的Bean实例。\n 3）request：在一次HTTP请求中\",\"容器会返回该Bean的同一个实例。而对不同的HTTP请求则会产生一个新的Bean\",\"而且该Bean仅在当前HTTP Request内有效。\n 4）session：在一次HTTP Session中\",\"容器会返回该Bean的同一个实例。而对不同的HTTP请求则会产生一个新的Bean\",\"而且该Bean仅在当前HTTP Session内有效。\n 5）global Session：在一个全局的HTTP Session中\",\"容器会返回该Bean的同一个实例。仅在使用portlet context时有效。\n');
insert into `jh` (`timu`, `ans`) values('struts的工作原理\n','正确答案：1、初始化\",\"读取struts-config.xml、web.xml等配置文件（所有配置文件的初始化）\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是事务的隔离性。\n','正确答案：隔离性（Isolation）指一个事务的执行不能被其它事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的\",\"并发执行的各个事务之间不能互相干扰。\n');
insert into `jh` (`timu`, `ans`) values('请简述值栈的作用。\n','正确答案：值栈可以作为一个数据中转站\",\"用于在前台-后台之间传递数据\",\"最典型的做法就是将Struts2标签与OGNL表达式的结合\",\"ValueStack(值栈)实际上是一个接口\",\"在Struts2中利用OGNL时\",\"实际上使用的是实现了该接口的OgnlValueStack类\",\"这个类是OGNL的基础。\n');
insert into `jh` (`timu`, `ans`) values('请列举Struts2的内建主题，并简述它们各自的效果。\n','正确答案：Struts2 默认提供了4种内建主题\",\"分别为simple、xhtml、css_xhtml和Ajax。\n 1）simple 主题：这是最简单的主题\",\"使用该主题时\",\"每个UI标签只生成最基本的HTML元素\",\"没有任何附加功能。\n 2）xhtml 主题：这是Struts2 的默认主题\",\"它对simple主题进行了扩展\",\"提供了布局功能、Label显示名称、以及与验证框架和国际化框架的集成。\n 3）css_xhtml：该主题是对xhtml的扩展\",\"在xhtml的基础之上添加对CSS的支持和控制。\n 4）Ajax：继承自xhtml\",\"提供Ajax支持。\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是依赖注入。\n','正确答案：DI的全称是Dependency Injection\",\"中文称之为依赖注入。如果一个对象A需要使用另一个对象B才能实现某个功能\",\"这时就可以说A对象依赖于B对象\",\"而Spring容器在创建A对象时\",\"会自动将A对象需要的B对象注入到A对象中\",\"此过程就是依赖注入。\n');
insert into `jh` (`timu`, `ans`) values('请说说你所知道的常用的二级缓存插件有哪些。\n','正确答案：常用的二级缓存插件有4种\",\"具体介绍如下：\n 1）EHCache：可作为进程范围内的缓存\",\"存放数据的物理介质可以是内存或硬盘\",\"对 Hibernate 的查询缓存提供了支持。\n 2）OpenSymphony OSCache：可作为进程范围内的缓存\",\"存放数据的物理介质可以是内存或硬盘。它提供了丰富的缓存数据过期策略\",\"并且对Hibernate的查询缓存提供了支持。\n 3）SwarmCache：可作为集群范围内的缓存\",\"但不支持 Hibernate 的查询缓存。\n 4）JbossCache：可作为集群范围内的缓存\",\"支持 Hibernate 的查询缓存。\n');
insert into `jh` (`timu`, `ans`) values('请简述事务的4大隔离级别分别是什么。\n','正确答案：事务的4大隔离级别分别是读未提交、读已提交、可重复读取和序列化。\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是自然主键和代理主键。\n','正确答案：自然主键和代理主键\",\"具体如下：\n 自然主键：把具有业务含义的字段作为主键\",\"称之为自然主键。例如在customer表中\",\"如果把name字段作为主键\",\"其前提条件必须是：每一个客户的姓名不允许为null\",\"不允许客户重名\",\"并且不允许修改客户姓名。尽管这也是可行的\",\"但是不能满足不断变化的业务需求\",\"一旦出现了允许客户重名的业务需求\",\"就必须修改数据模型\",\"重新定义表的主键\",\"这给数据库的维护增加了难度。\n 代理主键：把不具备业务含义的字段作为主键\",\"称之为代理主键。该字段一般取名为“ID”\",\"通常为整数类型\",\"因为整数类型比字符串类型要节省更多的数据库空间。在上面例子中\",\"显然更合理的方式是使用代理主键。\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是导航对象图检索。\n','正确答案：导航对象图检索方式是根据已经加载的对象\",\"导航到其他对象。它利用类与类之间的关系来检索对象。譬如要查找一份订单对应的客户\",\"就可以由订单对象自动导航找到订单所属的客户对象。当然\",\"前提是必须在对象关系映射文件上配置了多对一的关系。\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是OID检索方式。\n','正确答案：OID检索方式主要指用Session的get()和load()方法加载某条记录对应的对象。\n');
insert into `jh` (`timu`, `ans`) values('请简述Struts2标签库中<s:iterator>标签的作用及标签属性。\n','正确答案：<s:iterator>标签主要用于对集合中的数据进行迭代\",\"它可以根据条件遍历集合中的数据。<s:iterator>标签的属性及相关说明如下：\n begin：迭代数组或集合的起始位置\n end：迭代数组或集合的结束位置\n status：迭代过程中的状态\n step：指定每一次迭代后索引增加的值\n value：迭代的数组或集合对象\n var：将生成的Iterator设置为page范围的属性\n id：指定了集合元素的id\",\"现已用var代替\n');
insert into `jh` (`timu`, `ans`) values('请简述Struts2 的优点。\n','正确答案：Struts2的优势具体如下：\n · 项目开源\",\"使用及拓展方便\",\"天生优势。\n · 提供Exception处理机制。\n ·  Result方式的页面导航\",\"通过Result标签很方便的实现重定向和页面跳转。\n · 通过简单、集中的配置来调度业务类\",\"使得配置和修改都非常容易。\n ·  提供简单、统一的表达式语言来访问所有可供访问的数据。\n · 提供标准、强大的验证框架和国际化框架。\n · 提供强大的、可以有效减少页面代码的标签。\n · 提供良好的Ajax支持。\n · 拥有简单的插件\",\"只需放入相应的JAR包\",\"任何人都可以扩展Struts2框架\",\"比如自定义拦截器、自定义结果类型、自定义标签等\",\"为Struts2定制需要的功能\",\"不需要什么特殊配置\",\"并且可以发布给其他人使用。\n · 拥有智能的默认设置\",\"不需要另外进行繁琐的设置。使用默认设置就可以完成大多数项目程序开发所需要的功能。\n');
insert into `jh` (`timu`, `ans`) values('请列举数据库中多表之间的三种关系，并分别举例说明。\n','正确答案：数据库中多表之间存在的三种关系分别为多对多、一对多和一对一关系。举例如下：\n 1）多对多：学生和课程\",\"一个学生可以学习多门课程\",\"一门课程也可以被多个学生学习\n 2）一对多： 客户和订单\",\"一个客户有多个订单\n 3）一对一：身份证号和公民\",\"一个公民对应一个身份证号\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是事务隔离级别中的可重复读取。\n','正确答案：一个事务在执行过程中\",\"可以访问其他事务成功提交的新插入的数据\",\"但不可以访问成功修改的数据。读取数据的事务将会禁止写事务（但允许读事务）\",\"写事务则禁止任何其他事务。此隔离级别可有效的防止不可重复读和脏读。\n');
insert into `jh` (`timu`, `ans`) values('请简述在Hibernate中使用Query对象的步骤。\n','正确答案：在Hibernate中使用Query对象的步骤\",\"具体所示：\n（1）获得Hibernate中的Session对象。\n（2）编写HQL语句。\n（3）调用session.createQuery()方法创建查询对象。\n（4）如果HQL语句包含参数\",\"则调用Query的setXxx()方法设置参数。\n（5）调用Query对象的list() 或uniqueResult() 方法执行查询。\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是事务隔离级别中的序列化。\n','正确答案：提供严格的事务隔离。它要求事务序列化执行\",\"事务只能一个接着一个地执行\",\"但不能并发执行。此隔离级别可有效的防止脏读、不可重复读和幻读。\n');
insert into `jh` (`timu`, `ans`) values('请简述Session实例两种获取方式的区别。\n','正确答案：两种获取Session实例方式的主要区别是\",\"采用openSession方法获取Session实例时\",\"SessionFactory直接创建一个新的Session实例\",\"并且在使用完成后需要调用close方法进行手动关闭。而getCurrentSession方法创建的Session实例会被绑定到当前线程中\",\"它在提交或回滚操作时会自动关闭。\n');
insert into `jh` (`timu`, `ans`) values('请简述@Component注解的作用。\n','正确答案：可以使用此注解描述Spring中的Bean\",\"但它是一个泛化的概念\",\"仅仅表示一个组件 (Bean) \",\"并且可以作用在任何层次。使用时只需将该注解标注在相应类上即可。\n');
insert into `jh` (`timu`, `ans`) values('请简要说明如何使用Spring AOP Annotation方式实现声明式事务管理。\n','正确答案：Spring的声明式事务管理通过Annotation注解的方式非常简单\",\"我们需要做两件事情：\n（1）在Spring容器中注册驱动\",\"代码如下：\n<tx:annotation-driven transaction-manager=\"transactionManager\"/>\n（2）在需要使用事务的业务类或者方法上添加注解@Transactional\",\"这种方式的事务详情是通过@Transactional的参数进行配置的\n');
insert into `jh` (`timu`, `ans`) values('请简述事务有哪些并发问题。\n','正确答案：事务的并发问题有脏读、不可重复读、虚读/幻读和更新丢失。\n');
insert into `jh` (`timu`, `ans`) values('请简述使用自定义拦截器的过程。\n','正确答案：自定义拦截器的使用过程分为3步\",\"具体如下：\n');
insert into `jh` (`timu`, `ans`) values('请简述Hibernate中持久化对象瞬时态的特点。\n','正确答案：瞬时态也称为临时态或者自由态\",\"瞬时态的实例是由new命令创建、开辟内存空间的对象\",\"不存在持久化标识OID（相当于主键值）\",\"尚未与Hibernate中的Session关联\",\"在数据库中也没有记录\",\"失去引用后将被JVM回收。瞬时状态的对象在内存中是孤立存在的\",\"与数据库中的数据无任何关联\",\"仅是一个信息携带的载体。\n');
insert into `jh` (`timu`, `ans`) values('请简要说明Hibernate的执行流程。\n','正确答案：(1)初始化Hibernate\",\"构建Configuration实例。这一步用来读取Hibernate核心配置文件和映射文件信息到Configuration对象中。\n(2)创建SessionFactory实例。通过Configuration对象读取到的配置文件信息并创建SessionFactory\",\"并将Configuration对象中的所有配置文件信息存入SessionFactory内存中。\n(3)创建Session实例\",\"建立数据库连接。Session是通过SessionFactory打开\",\"创建一个Session对象就相当于建立一个新的数据库连接。\n(4)创建Transaction实例\",\"开启一个事务。Transaction用于事务管理\",\"一个Transaction对象对应的事务可以包含多个操作。在使用Hibernate进行增、删、改操作的时候\",\"必须先创建Transaction对象。\n(5)利用Session接口通过的各种方法进行持久化操作。\n(6)提交事务。对实体对象持久化操作后\",\"必须提交事务。\n(7)关闭Session\",\"断开与数据库连接。\n');
insert into `jh` (`timu`, `ans`) values('请简要说明缓存的好处。\n','正确答案：将数据库或者硬盘数据 \",\"保存在内存中\",\"减少数据库查询次数\",\"减少硬盘交互\",\"提高检索效率。。\n');
insert into `jh` (`timu`, `ans`) values('请简述Spring框架有哪些优点。\n','正确答案：Spring框架优点的总结\",\"具体如下：\n 1）方便解耦、简化开发\n 2）AOP编程的支持\n 3）声明式事务的支持\n 4）方便程序的测试\n 5）方便集成各种优秀框架\n 6）降低JavaEE API的使用难度\n');
insert into `jh` (`timu`, `ans`) values('请简述使用Criteria对象查询数据的主要步骤。\n','正确答案：使用Criteria对象查询数据的主要步骤\",\"具体如下：\n（1）获得Hibernate的Session对象。\n（2）通过Session获得Criteria对象。\n（3）使用Restrictions的静态方法创建Criterion条件对象。Restrictions类中提供了一系列用于设定查询条件的静态方法\",\"这些静态方法都返回Criterion实例\",\"每个Criterion实例代表一个查询条件。\n（4）向Criteria对象中添加Criterion 查询条件。Criteria的add()方法用于加入查询条件。\n（5）执行Criterita的 list() 或uniqueResult() 获得结果。\n');
insert into `jh` (`timu`, `ans`) values('请简要描述EL表达式如何访问值栈中的数据。\n','正确答案：struts2对request进行了增强\",\"如果在request作用域中没有查找到对应的值\",\"就去值栈中查找\",\"找到后会将数据取出。在请求范围中找不到时\",\"先作为属性在root中找\",\"找不到会作为key到contextMap中找对应的value。\n');
insert into `jh` (`timu`, `ans`) values('请列举出5个常见内建拦截器及作用。\n','正确答案：（符合条件即可\",\"答案仅供参考）\n(1) params：将请求中的参数设置到Action中。\n(2) model-driven：如果一个类实现了ModelDriven\",\"将getModel得到的结果放在ValueStack中。\n(3) fileUpload：提供文件上传功能。\n(4) i18n：记录用户选择的locale。\n(5) validation：使用action-validation.xml文件中定义的内容校验提交的数据。\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是HQL检索方式。\n','正确答案：HQL（Hibernate Query Language）是面向对象的查询语言\",\"它和SQL查询语言有些相似\",\"但它使用的是类、对象和属性的概念\",\"而没有表和字段的概念。在Hibernate提供的各种检索方式中\",\"HQL是官方推荐的查询语言\",\"也是使用最广泛的一种检索方式。\n');
insert into `jh` (`timu`, `ans`) values('请简要说明Hibernate一级缓存的特点。\n','正确答案：(1)当应用程序调用Session接口的save()、update()、saveOrUpdate时\",\"如果Session缓存中没有相应的对象\",\"Hibernate就会自动的把从数据库中查询到的相应对象信息加入到一级缓存中去。\n(2)当调用Session接口的load()、get()方法\",\"以及Query接口的list()、iterator()方法时\",\"会判断缓存中是否存在该对象\",\"有则返回\",\"不会查询数据库\",\"如果缓存中没有要查询对象\",\"再去数据库中查询对应对象\",\"并添加到一级缓存中。\n(3)当调用Session的close()方法时\",\"Session缓存会被清空。\n(4)Session 能够在某些时间点\",\"按照缓存中对象的变化\",\"执行相关的 SQL 语句来同步更新数据库\",\" 这一过程被称为刷出缓存(flush)。\n');
insert into `jh` (`timu`, `ans`) values('请简述Hibernate中持久化的对象有哪些。\n','正确答案：在Hibernate中持久化的对象可以划分为三种状态\",\"分别是瞬时态、持久态和脱管态。\n');
insert into `jh` (`timu`, `ans`) values('Spring依赖注入有哪些实现方式，列举并分别进行说明。\n','正确答案：依赖注入存在三种实现方式\",\"分别是setter方法注入、构造方法注入和接口注入。具体介绍如下：\n 1）属性setter注入：指IoC容器使用setter方法来注入被依赖的实例。通过调用无参构造器或无参static工厂方法实例化bean后\",\"调用该bean的setter方法\",\"即可实现基于setter的DI。\n 2）构造方法注入：指IoC容器使用构造方法来注入被依赖的实例。基于构造器的DI通过调用带参数的构造方法来实现\",\"每个参数代表着一个依赖。\n 3）接口注入：Spring容器不支持接口注入。\n');
insert into `jh` (`timu`, `ans`) values('请写出在web.xml文件配置Spring监听器的代码片段。\n','正确答案：在web.xml文件配置Spring监听器的代码片段如下：\n<!-- 监听器 -->\n<context-param>\n<param-name>contextConfigLocation</param-name>\n<param-value>classpath:applicationContext.xml</param-value>\n</context-param>\n<listener>\n<listener-class>\norg.springframework.web.context.ContextLoaderListener\n</listener-class>\n</listener>\n');
insert into `jh` (`timu`, `ans`) values('请简述Hibernate中持久化对象持久态的特点。\n','正确答案：持久态的对象存在持久化标识OID\",\"加入到了Session缓存中\",\"并且相关联的Session没有关闭\",\"在数据库中有对应的记录\",\"每条记录只对应唯一的持久化对象\",\"需要注意的是\",\"持久态对象是在事务还未提交前变成持久态的。\n');
insert into `jh` (`timu`, `ans`) values('请列举Spring中实例化Bean的三种方式。\n','正确答案：在Spring中\",\"实例化Bean有三种方式\",\"分别为构造器实例化、静态工厂方式实例化和实例工厂方式实例化。\n');
insert into `jh` (`timu`, `ans`) values('请简述SessionFactory缓存的分类，并说明。\n','正确答案：SessionFactory 的缓存可以分为两类\",\"具体如下：\n 内置缓存：Hibernate 自带的\",\"不可卸载。通常在 Hibernate 的初始化阶段\",\"Hibernate会把映射元数据和预定义的SQL语句放到 SessionFactory 的缓存中\",\" 映射元数据是映射文件中数据的复制\",\"而预定义SQL语句是Hibernate根据映射元数据推导出来的。该内置缓存是只读的。\n 外置缓存(二级缓存)：一个可配置的缓存插件。在默认情况下\",\"SessionFactory不会启用这个缓存插件\",\"外置缓存中的数据是数据库数据的复制\",\"外置缓存的物理介质可以是内存或硬盘。\n');
insert into `jh` (`timu`, `ans`) values('请列举你所知道的Transaction接口提供的事务管理的常用方法，并简要说明其功能。\n','正确答案：在Transaction接口中\",\"提供了事务管理的常用方法\",\"具体如下：\n commit()方法：提交相关联的session实例。\n rollback()方法：撤销事务操作。\n wasCommitted()方法：检查事务是否提交。\n');
insert into `jh` (`timu`, `ans`) values('请简述你对Hibernate中持久化概念的理解。\n','正确答案：所谓的持久化\",\"就是将内存中的数据永久存储到关系型数据库中。持久化的主要应用是将内存中的对象存储在的数据库中\",\"或者存储在磁盘文件中、XML数据文件中等等。\n');
insert into `jh` (`timu`, `ans`) values('Struts2在web.xml文件中需要配置什么。\n','正确答案：<!--配置Struts2核心控制器-->\n<filter>\n<filter-name>struts2</filter-name>\n<filter-class>\norg.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter\n</filter-class>\n</filter>\n<filter-mapping>\n<filter-name>struts2</filter-name>\n<url-pattern>/*</url-pattern>\n</filter-mapping>\n');
insert into `jh` (`timu`, `ans`) values('请简述SessionFactory的特点。\n','正确答案：SessionFactory具有以下特点：\n 1）它是线程安全的\",\"它的同一个实例能够供多个线程共享。\n 2）它是重量级的\",\"不能随意的创建和销毁它的实例。\n');
insert into `jh` (`timu`, `ans`) values('简要说明SSH框架中的Hibernate工作原理。\n','正确答案：1.取并解析配置文件\n');
insert into `jh` (`timu`, `ans`) values('请简要说明Struts2常量配置有3种方式。\n','正确答案：Struts2常量配置共有3种方式\",\"分别如下：\n 1）在struts.xml文件中使用<constant>元素配置常量。\n 2）在struts.properties文件中配置常量。\n 3）在web.xml文件中通过< init-param>元素配置常量。\n');
insert into `jh` (`timu`, `ans`) values('请采用两种方法编写创建ApplicationContext接口实例。\n','正确答案：创建ApplicationContext接口实例\",\"通常采用两种方法\",\"具体如下：\n 1）ClassPathXmlApplicationContext：从类路径中的XML文件载入上下文定义信息\",\"把上下文定义文件当作类路径资源\",\" 创建语法如下：\nApplicationContext applicationContext = new ClassPathXmlApplicationContext\n(\"applicationContext.xml\");\n 2）FileSystemXmlApplicationContext：从文件系统中（指定的路径下）的XML文件载入上下文定义信息\",\"创建语法如下：\nApplicationContext applicationContext =\nnew FileSystemXmlApplicationContext\n(\"F:\\\\workspaces\\\\chapter12\\\\src\\\\cn\\\\itcast\\\\ioc\\\\applicationContext.xml\");\n');
insert into `jh` (`timu`, `ans`) values('请分别简述什么是普通标签和UI标签。\n','正确答案：普通标签又分为控制标签（Control Tags）和数据标签（Data Tags）。控制标签用来完成条件逻辑、循环逻辑的控制\",\"也可用来做集合的操作。数据标签用来输出后台的数据和完成其他数据访问功能。\nUI标签又分为表单标签（Form Tags）、非表单标签（Non-Form Tags）和Ajax标签。表单标签主要用来生成HTML页面中的表单元素\",\"非表单标签主要用来生成HTML的<div>标签及输出Action中封装的信息等。Ajax标签主要用来提供Ajax技术支持。\n');
insert into `jh` (`timu`, `ans`) values('请列举值栈的获取方式。\n','正确答案：值栈有两种获取方式\",\"具体如下：\n（1）在request中获取值栈\n从request中取出值栈的信息\",\"获取方式如下所示：\n// 获取ValueStack对象\",\"通过request对象获取。\nValueStack valueStack = (ValueStack)ServletActionContext.getRequest()\n.getAttribute(ServletActionContext.STRUTS_VALUESTACK_KEY);\n（2）在ActionContext中获取值栈\nActionContext获取ValueStack对象的方式如下所示：\n//通过ActionContext获取valueStack对象\nValueStack valueStack = ActionContext.getContext().getValueStack();\n');
insert into `jh` (`timu`, `ans`) values('请编写出在web.xml文件中配置Struts2核心控制器的代码片段。\n','正确答案：<!--配置Struts2核心控制器-->\n<filter>\n<filter-name>struts2</filter-name>\n<filter-class>\norg.apache.struts2.dispatcher.ng.\nfilter.StrutsPrepareAndExecuteFilter\n</filter-class>\n</filter>\n<filter-mapping>\n<filter-name>struts2</filter-name>\n<url-pattern>/*</url-pattern>\n</filter-mapping>\n');
insert into `jh` (`timu`, `ans`) values('请简述Hibernate持久化操作的主要步骤。\n','正确答案：Hibernate持久化操作的主要步骤\",\"具体如下：\n（1）初始化Hibernate\",\"构建Configuration实例。这一步用来读取Hibernate核心配置文件和映射文件信息到Configuration对象中。\n（2）创建SessionFactory实例。通过Configuration对象读取到的配置文件信息并创建SessionFactory\",\"并将Configuration对象中的所有配置文件信息存入SessionFactory内存中。\n（3）创建Session实例\",\"建立数据库连接。Session是通过SessionFactory打开\",\"创建一个Session对象就相当于建立一个新的数据库连接。\n（4）创建Transaction实例\",\"开启一个事务。Transaction用于事务管理\",\"一个Transaction对象对应的事务可以包含多个操作。在使用Hibernate进行增、删、改操作的时候\",\"必须先创建Transaction对象。\n（5）利用Session接口通过的各种方法进行持久化操作。\n（6）提交事务。对实体对象持久化操作后\",\"必须提交事务。\n（7）关闭Session\",\"断开与数据库连接。\n');
insert into `jh` (`timu`, `ans`) values('请简述什么是Hibernate事务处理方式的乐观锁。\n','正确答案：与悲观锁相比\",\"乐观锁（Optimistic Locking）通常认为许多事务同时操作同一个数据的情况很少发生\",\"所以乐观锁不做数据库层次的锁定\",\"而是基于数据版本（Version）标识实现应用程序级别上的锁定机制。这样既能够保证多个事务的并发操作\",\"又能有效的防止第二类丢失更新的发生。\n');
insert into `jh` (`timu`, `ans`) values('请简述你对Hibernate的核心API中Criteria的了解。\n','正确答案：Criteria是一个完全面向对象\",\"可扩展的条件查询API\",\"通过它完全不需要考虑数据库底层如何实现\",\"以及SQL语句如何编写\",\"它是Hibernate框架的核心查询对象。Criteria 查询\",\"又称为QBC查询（Query By Criteria）\",\"它是Hibernate的另一种对象检索方式。\n');
insert into `jh` (`timu`, `ans`) values('请简述Hibernate的一级缓存的特点。\n','正确答案：Hibernate的一级缓存有如下特点：\n 1）当应用程序调用Session接口的save()、update()、saveOrUpdate时\",\"如果Session缓存中没有相应的对象\",\"Hibernate就会自动的把从数据库中查询到的相应对象信息加入到一级缓存中去。\n 2）当调用Session接口的load()、get()方法\",\"以及Query接口的list()、iterator()方法时\",\"会判断缓存中是否存在该对象\",\"有则返回\",\"不会查询数据库\",\"如果缓存中没有要查询对象\",\"再去数据库中查询对应对象\",\"并添加到一级缓存中。\n 3）当调用Session的close()方法时\",\"Session缓存会被清空。\n 4）Session 能够在某些时间点\",\"按照缓存中对象的变化\",\"执行相关的 SQL 语句来同步更新数据库\",\" 这一过程被称为刷出缓存(flush)。\n');
insert into `jh` (`timu`, `ans`) values('请说说改变Struts默认主题的方式有几种，并分别举例说明。\n','正确答案：改变Struts默认主题的方式有2种\",\"通常通过设置常量struts.ui.theme来改变默认主题\",\"具体做法是在struts.xml或者struts.properties文件中增加相应的配置。比如想要设置使用simple的主题\",\"那么需要在struts.xml中增加如下配置：\n<constant name=\"struts.ui.theme\" value=\"simple\"/>\n或者在struts.properties文件中增加如下配置：\nstruts.ui.theme = simple\n');
